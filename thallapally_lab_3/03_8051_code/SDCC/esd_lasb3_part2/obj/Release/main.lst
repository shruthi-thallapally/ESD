                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl __sdcc_external_startup
                                     13 	.globl _free
                                     14 	.globl _malloc
                                     15 	.globl _printf_tiny
                                     16 	.globl _printf
                                     17 	.globl _TF1
                                     18 	.globl _TR1
                                     19 	.globl _TF0
                                     20 	.globl _TR0
                                     21 	.globl _IE1
                                     22 	.globl _IT1
                                     23 	.globl _IE0
                                     24 	.globl _IT0
                                     25 	.globl _SM0
                                     26 	.globl _SM1
                                     27 	.globl _SM2
                                     28 	.globl _REN
                                     29 	.globl _TB8
                                     30 	.globl _RB8
                                     31 	.globl _TI
                                     32 	.globl _RI
                                     33 	.globl _CY
                                     34 	.globl _AC
                                     35 	.globl _F0
                                     36 	.globl _RS1
                                     37 	.globl _RS0
                                     38 	.globl _OV
                                     39 	.globl _F1
                                     40 	.globl _P
                                     41 	.globl _RD
                                     42 	.globl _WR
                                     43 	.globl _T1
                                     44 	.globl _T0
                                     45 	.globl _INT1
                                     46 	.globl _INT0
                                     47 	.globl _TXD0
                                     48 	.globl _TXD
                                     49 	.globl _RXD0
                                     50 	.globl _RXD
                                     51 	.globl _P3_7
                                     52 	.globl _P3_6
                                     53 	.globl _P3_5
                                     54 	.globl _P3_4
                                     55 	.globl _P3_3
                                     56 	.globl _P3_2
                                     57 	.globl _P3_1
                                     58 	.globl _P3_0
                                     59 	.globl _P2_7
                                     60 	.globl _P2_6
                                     61 	.globl _P2_5
                                     62 	.globl _P2_4
                                     63 	.globl _P2_3
                                     64 	.globl _P2_2
                                     65 	.globl _P2_1
                                     66 	.globl _P2_0
                                     67 	.globl _P1_7
                                     68 	.globl _P1_6
                                     69 	.globl _P1_5
                                     70 	.globl _P1_4
                                     71 	.globl _P1_3
                                     72 	.globl _P1_2
                                     73 	.globl _P1_1
                                     74 	.globl _P1_0
                                     75 	.globl _P0_7
                                     76 	.globl _P0_6
                                     77 	.globl _P0_5
                                     78 	.globl _P0_4
                                     79 	.globl _P0_3
                                     80 	.globl _P0_2
                                     81 	.globl _P0_1
                                     82 	.globl _P0_0
                                     83 	.globl _PS
                                     84 	.globl _PT1
                                     85 	.globl _PX1
                                     86 	.globl _PT0
                                     87 	.globl _PX0
                                     88 	.globl _EA
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _BREG_F7
                                     95 	.globl _BREG_F6
                                     96 	.globl _BREG_F5
                                     97 	.globl _BREG_F4
                                     98 	.globl _BREG_F3
                                     99 	.globl _BREG_F2
                                    100 	.globl _BREG_F1
                                    101 	.globl _BREG_F0
                                    102 	.globl _P5_7
                                    103 	.globl _P5_6
                                    104 	.globl _P5_5
                                    105 	.globl _P5_4
                                    106 	.globl _P5_3
                                    107 	.globl _P5_2
                                    108 	.globl _P5_1
                                    109 	.globl _P5_0
                                    110 	.globl _P4_7
                                    111 	.globl _P4_6
                                    112 	.globl _P4_5
                                    113 	.globl _P4_4
                                    114 	.globl _P4_3
                                    115 	.globl _P4_2
                                    116 	.globl _P4_1
                                    117 	.globl _P4_0
                                    118 	.globl _PX0L
                                    119 	.globl _PT0L
                                    120 	.globl _PX1L
                                    121 	.globl _PT1L
                                    122 	.globl _PSL
                                    123 	.globl _PT2L
                                    124 	.globl _PPCL
                                    125 	.globl _EC
                                    126 	.globl _CCF0
                                    127 	.globl _CCF1
                                    128 	.globl _CCF2
                                    129 	.globl _CCF3
                                    130 	.globl _CCF4
                                    131 	.globl _CR
                                    132 	.globl _CF
                                    133 	.globl _TF2
                                    134 	.globl _EXF2
                                    135 	.globl _RCLK
                                    136 	.globl _TCLK
                                    137 	.globl _EXEN2
                                    138 	.globl _TR2
                                    139 	.globl _C_T2
                                    140 	.globl _CP_RL2
                                    141 	.globl _T2CON_7
                                    142 	.globl _T2CON_6
                                    143 	.globl _T2CON_5
                                    144 	.globl _T2CON_4
                                    145 	.globl _T2CON_3
                                    146 	.globl _T2CON_2
                                    147 	.globl _T2CON_1
                                    148 	.globl _T2CON_0
                                    149 	.globl _PT2
                                    150 	.globl _ET2
                                    151 	.globl _TMOD
                                    152 	.globl _TL1
                                    153 	.globl _TL0
                                    154 	.globl _TH1
                                    155 	.globl _TH0
                                    156 	.globl _TCON
                                    157 	.globl _SP
                                    158 	.globl _SCON
                                    159 	.globl _SBUF0
                                    160 	.globl _SBUF
                                    161 	.globl _PSW
                                    162 	.globl _PCON
                                    163 	.globl _P3
                                    164 	.globl _P2
                                    165 	.globl _P1
                                    166 	.globl _P0
                                    167 	.globl _IP
                                    168 	.globl _IE
                                    169 	.globl _DP0L
                                    170 	.globl _DPL
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _B
                                    174 	.globl _ACC
                                    175 	.globl _EECON
                                    176 	.globl _KBF
                                    177 	.globl _KBE
                                    178 	.globl _KBLS
                                    179 	.globl _BRL
                                    180 	.globl _BDRCON
                                    181 	.globl _T2MOD
                                    182 	.globl _SPDAT
                                    183 	.globl _SPSTA
                                    184 	.globl _SPCON
                                    185 	.globl _SADEN
                                    186 	.globl _SADDR
                                    187 	.globl _WDTPRG
                                    188 	.globl _WDTRST
                                    189 	.globl _P5
                                    190 	.globl _P4
                                    191 	.globl _IPH1
                                    192 	.globl _IPL1
                                    193 	.globl _IPH0
                                    194 	.globl _IPL0
                                    195 	.globl _IEN1
                                    196 	.globl _IEN0
                                    197 	.globl _CMOD
                                    198 	.globl _CL
                                    199 	.globl _CH
                                    200 	.globl _CCON
                                    201 	.globl _CCAPM4
                                    202 	.globl _CCAPM3
                                    203 	.globl _CCAPM2
                                    204 	.globl _CCAPM1
                                    205 	.globl _CCAPM0
                                    206 	.globl _CCAP4L
                                    207 	.globl _CCAP3L
                                    208 	.globl _CCAP2L
                                    209 	.globl _CCAP1L
                                    210 	.globl _CCAP0L
                                    211 	.globl _CCAP4H
                                    212 	.globl _CCAP3H
                                    213 	.globl _CCAP2H
                                    214 	.globl _CCAP1H
                                    215 	.globl _CCAP0H
                                    216 	.globl _CKCON1
                                    217 	.globl _CKCON0
                                    218 	.globl _CKRL
                                    219 	.globl _AUXR1
                                    220 	.globl _AUXR
                                    221 	.globl _TH2
                                    222 	.globl _TL2
                                    223 	.globl _RCAP2H
                                    224 	.globl _RCAP2L
                                    225 	.globl _T2CON
                                    226 	.globl _buff0size
                                    227 	.globl _getchar
                                    228 	.globl _putchar
                                    229 	.globl _input_num
                                    230 ;--------------------------------------------------------
                                    231 ; special function registers
                                    232 ;--------------------------------------------------------
                                    233 	.area RSEG    (ABS,DATA)
      000000                        234 	.org 0x0000
                           0000C8   235 _T2CON	=	0x00c8
                           0000CA   236 _RCAP2L	=	0x00ca
                           0000CB   237 _RCAP2H	=	0x00cb
                           0000CC   238 _TL2	=	0x00cc
                           0000CD   239 _TH2	=	0x00cd
                           00008E   240 _AUXR	=	0x008e
                           0000A2   241 _AUXR1	=	0x00a2
                           000097   242 _CKRL	=	0x0097
                           00008F   243 _CKCON0	=	0x008f
                           0000AF   244 _CKCON1	=	0x00af
                           0000FA   245 _CCAP0H	=	0x00fa
                           0000FB   246 _CCAP1H	=	0x00fb
                           0000FC   247 _CCAP2H	=	0x00fc
                           0000FD   248 _CCAP3H	=	0x00fd
                           0000FE   249 _CCAP4H	=	0x00fe
                           0000EA   250 _CCAP0L	=	0x00ea
                           0000EB   251 _CCAP1L	=	0x00eb
                           0000EC   252 _CCAP2L	=	0x00ec
                           0000ED   253 _CCAP3L	=	0x00ed
                           0000EE   254 _CCAP4L	=	0x00ee
                           0000DA   255 _CCAPM0	=	0x00da
                           0000DB   256 _CCAPM1	=	0x00db
                           0000DC   257 _CCAPM2	=	0x00dc
                           0000DD   258 _CCAPM3	=	0x00dd
                           0000DE   259 _CCAPM4	=	0x00de
                           0000D8   260 _CCON	=	0x00d8
                           0000F9   261 _CH	=	0x00f9
                           0000E9   262 _CL	=	0x00e9
                           0000D9   263 _CMOD	=	0x00d9
                           0000A8   264 _IEN0	=	0x00a8
                           0000B1   265 _IEN1	=	0x00b1
                           0000B8   266 _IPL0	=	0x00b8
                           0000B7   267 _IPH0	=	0x00b7
                           0000B2   268 _IPL1	=	0x00b2
                           0000B3   269 _IPH1	=	0x00b3
                           0000C0   270 _P4	=	0x00c0
                           0000E8   271 _P5	=	0x00e8
                           0000A6   272 _WDTRST	=	0x00a6
                           0000A7   273 _WDTPRG	=	0x00a7
                           0000A9   274 _SADDR	=	0x00a9
                           0000B9   275 _SADEN	=	0x00b9
                           0000C3   276 _SPCON	=	0x00c3
                           0000C4   277 _SPSTA	=	0x00c4
                           0000C5   278 _SPDAT	=	0x00c5
                           0000C9   279 _T2MOD	=	0x00c9
                           00009B   280 _BDRCON	=	0x009b
                           00009A   281 _BRL	=	0x009a
                           00009C   282 _KBLS	=	0x009c
                           00009D   283 _KBE	=	0x009d
                           00009E   284 _KBF	=	0x009e
                           0000D2   285 _EECON	=	0x00d2
                           0000E0   286 _ACC	=	0x00e0
                           0000F0   287 _B	=	0x00f0
                           000083   288 _DPH	=	0x0083
                           000083   289 _DP0H	=	0x0083
                           000082   290 _DPL	=	0x0082
                           000082   291 _DP0L	=	0x0082
                           0000A8   292 _IE	=	0x00a8
                           0000B8   293 _IP	=	0x00b8
                           000080   294 _P0	=	0x0080
                           000090   295 _P1	=	0x0090
                           0000A0   296 _P2	=	0x00a0
                           0000B0   297 _P3	=	0x00b0
                           000087   298 _PCON	=	0x0087
                           0000D0   299 _PSW	=	0x00d0
                           000099   300 _SBUF	=	0x0099
                           000099   301 _SBUF0	=	0x0099
                           000098   302 _SCON	=	0x0098
                           000081   303 _SP	=	0x0081
                           000088   304 _TCON	=	0x0088
                           00008C   305 _TH0	=	0x008c
                           00008D   306 _TH1	=	0x008d
                           00008A   307 _TL0	=	0x008a
                           00008B   308 _TL1	=	0x008b
                           000089   309 _TMOD	=	0x0089
                                    310 ;--------------------------------------------------------
                                    311 ; special function bits
                                    312 ;--------------------------------------------------------
                                    313 	.area RSEG    (ABS,DATA)
      000000                        314 	.org 0x0000
                           0000AD   315 _ET2	=	0x00ad
                           0000BD   316 _PT2	=	0x00bd
                           0000C8   317 _T2CON_0	=	0x00c8
                           0000C9   318 _T2CON_1	=	0x00c9
                           0000CA   319 _T2CON_2	=	0x00ca
                           0000CB   320 _T2CON_3	=	0x00cb
                           0000CC   321 _T2CON_4	=	0x00cc
                           0000CD   322 _T2CON_5	=	0x00cd
                           0000CE   323 _T2CON_6	=	0x00ce
                           0000CF   324 _T2CON_7	=	0x00cf
                           0000C8   325 _CP_RL2	=	0x00c8
                           0000C9   326 _C_T2	=	0x00c9
                           0000CA   327 _TR2	=	0x00ca
                           0000CB   328 _EXEN2	=	0x00cb
                           0000CC   329 _TCLK	=	0x00cc
                           0000CD   330 _RCLK	=	0x00cd
                           0000CE   331 _EXF2	=	0x00ce
                           0000CF   332 _TF2	=	0x00cf
                           0000DF   333 _CF	=	0x00df
                           0000DE   334 _CR	=	0x00de
                           0000DC   335 _CCF4	=	0x00dc
                           0000DB   336 _CCF3	=	0x00db
                           0000DA   337 _CCF2	=	0x00da
                           0000D9   338 _CCF1	=	0x00d9
                           0000D8   339 _CCF0	=	0x00d8
                           0000AE   340 _EC	=	0x00ae
                           0000BE   341 _PPCL	=	0x00be
                           0000BD   342 _PT2L	=	0x00bd
                           0000BC   343 _PSL	=	0x00bc
                           0000BB   344 _PT1L	=	0x00bb
                           0000BA   345 _PX1L	=	0x00ba
                           0000B9   346 _PT0L	=	0x00b9
                           0000B8   347 _PX0L	=	0x00b8
                           0000C0   348 _P4_0	=	0x00c0
                           0000C1   349 _P4_1	=	0x00c1
                           0000C2   350 _P4_2	=	0x00c2
                           0000C3   351 _P4_3	=	0x00c3
                           0000C4   352 _P4_4	=	0x00c4
                           0000C5   353 _P4_5	=	0x00c5
                           0000C6   354 _P4_6	=	0x00c6
                           0000C7   355 _P4_7	=	0x00c7
                           0000E8   356 _P5_0	=	0x00e8
                           0000E9   357 _P5_1	=	0x00e9
                           0000EA   358 _P5_2	=	0x00ea
                           0000EB   359 _P5_3	=	0x00eb
                           0000EC   360 _P5_4	=	0x00ec
                           0000ED   361 _P5_5	=	0x00ed
                           0000EE   362 _P5_6	=	0x00ee
                           0000EF   363 _P5_7	=	0x00ef
                           0000F0   364 _BREG_F0	=	0x00f0
                           0000F1   365 _BREG_F1	=	0x00f1
                           0000F2   366 _BREG_F2	=	0x00f2
                           0000F3   367 _BREG_F3	=	0x00f3
                           0000F4   368 _BREG_F4	=	0x00f4
                           0000F5   369 _BREG_F5	=	0x00f5
                           0000F6   370 _BREG_F6	=	0x00f6
                           0000F7   371 _BREG_F7	=	0x00f7
                           0000A8   372 _EX0	=	0x00a8
                           0000A9   373 _ET0	=	0x00a9
                           0000AA   374 _EX1	=	0x00aa
                           0000AB   375 _ET1	=	0x00ab
                           0000AC   376 _ES	=	0x00ac
                           0000AF   377 _EA	=	0x00af
                           0000B8   378 _PX0	=	0x00b8
                           0000B9   379 _PT0	=	0x00b9
                           0000BA   380 _PX1	=	0x00ba
                           0000BB   381 _PT1	=	0x00bb
                           0000BC   382 _PS	=	0x00bc
                           000080   383 _P0_0	=	0x0080
                           000081   384 _P0_1	=	0x0081
                           000082   385 _P0_2	=	0x0082
                           000083   386 _P0_3	=	0x0083
                           000084   387 _P0_4	=	0x0084
                           000085   388 _P0_5	=	0x0085
                           000086   389 _P0_6	=	0x0086
                           000087   390 _P0_7	=	0x0087
                           000090   391 _P1_0	=	0x0090
                           000091   392 _P1_1	=	0x0091
                           000092   393 _P1_2	=	0x0092
                           000093   394 _P1_3	=	0x0093
                           000094   395 _P1_4	=	0x0094
                           000095   396 _P1_5	=	0x0095
                           000096   397 _P1_6	=	0x0096
                           000097   398 _P1_7	=	0x0097
                           0000A0   399 _P2_0	=	0x00a0
                           0000A1   400 _P2_1	=	0x00a1
                           0000A2   401 _P2_2	=	0x00a2
                           0000A3   402 _P2_3	=	0x00a3
                           0000A4   403 _P2_4	=	0x00a4
                           0000A5   404 _P2_5	=	0x00a5
                           0000A6   405 _P2_6	=	0x00a6
                           0000A7   406 _P2_7	=	0x00a7
                           0000B0   407 _P3_0	=	0x00b0
                           0000B1   408 _P3_1	=	0x00b1
                           0000B2   409 _P3_2	=	0x00b2
                           0000B3   410 _P3_3	=	0x00b3
                           0000B4   411 _P3_4	=	0x00b4
                           0000B5   412 _P3_5	=	0x00b5
                           0000B6   413 _P3_6	=	0x00b6
                           0000B7   414 _P3_7	=	0x00b7
                           0000B0   415 _RXD	=	0x00b0
                           0000B0   416 _RXD0	=	0x00b0
                           0000B1   417 _TXD	=	0x00b1
                           0000B1   418 _TXD0	=	0x00b1
                           0000B2   419 _INT0	=	0x00b2
                           0000B3   420 _INT1	=	0x00b3
                           0000B4   421 _T0	=	0x00b4
                           0000B5   422 _T1	=	0x00b5
                           0000B6   423 _WR	=	0x00b6
                           0000B7   424 _RD	=	0x00b7
                           0000D0   425 _P	=	0x00d0
                           0000D1   426 _F1	=	0x00d1
                           0000D2   427 _OV	=	0x00d2
                           0000D3   428 _RS0	=	0x00d3
                           0000D4   429 _RS1	=	0x00d4
                           0000D5   430 _F0	=	0x00d5
                           0000D6   431 _AC	=	0x00d6
                           0000D7   432 _CY	=	0x00d7
                           000098   433 _RI	=	0x0098
                           000099   434 _TI	=	0x0099
                           00009A   435 _RB8	=	0x009a
                           00009B   436 _TB8	=	0x009b
                           00009C   437 _REN	=	0x009c
                           00009D   438 _SM2	=	0x009d
                           00009E   439 _SM1	=	0x009e
                           00009F   440 _SM0	=	0x009f
                           000088   441 _IT0	=	0x0088
                           000089   442 _IE0	=	0x0089
                           00008A   443 _IT1	=	0x008a
                           00008B   444 _IE1	=	0x008b
                           00008C   445 _TR0	=	0x008c
                           00008D   446 _TF0	=	0x008d
                           00008E   447 _TR1	=	0x008e
                           00008F   448 _TF1	=	0x008f
                                    449 ;--------------------------------------------------------
                                    450 ; overlayable register banks
                                    451 ;--------------------------------------------------------
                                    452 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        453 	.ds 8
                                    454 ;--------------------------------------------------------
                                    455 ; internal ram data
                                    456 ;--------------------------------------------------------
                                    457 	.area DSEG    (DATA)
      000000                        458 _main_sloc0_1_0:
      000000                        459 	.ds 2
      000002                        460 _main_sloc1_1_0:
      000002                        461 	.ds 2
      000004                        462 _main_sloc2_1_0:
      000004                        463 	.ds 2
      000006                        464 _main_sloc3_1_0:
      000006                        465 	.ds 1
      000007                        466 _main_sloc4_1_0:
      000007                        467 	.ds 2
      000009                        468 _main_sloc5_1_0:
      000009                        469 	.ds 2
      00000B                        470 _main_sloc6_1_0:
      00000B                        471 	.ds 2
      00000D                        472 _main_sloc7_1_0:
      00000D                        473 	.ds 2
      00000F                        474 _main_sloc8_1_0:
      00000F                        475 	.ds 2
                                    476 ;--------------------------------------------------------
                                    477 ; overlayable items in internal ram
                                    478 ;--------------------------------------------------------
                                    479 ;--------------------------------------------------------
                                    480 ; Stack segment in internal ram
                                    481 ;--------------------------------------------------------
                                    482 	.area	SSEG
      000000                        483 __start__stack:
      000000                        484 	.ds	1
                                    485 
                                    486 ;--------------------------------------------------------
                                    487 ; indirectly addressable internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area ISEG    (DATA)
                                    490 ;--------------------------------------------------------
                                    491 ; absolute internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area IABS    (ABS,DATA)
                                    494 	.area IABS    (ABS,DATA)
                                    495 ;--------------------------------------------------------
                                    496 ; bit data
                                    497 ;--------------------------------------------------------
                                    498 	.area BSEG    (BIT)
                                    499 ;--------------------------------------------------------
                                    500 ; paged external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area PSEG    (PAG,XDATA)
                                    503 ;--------------------------------------------------------
                                    504 ; external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area XSEG    (XDATA)
      000000                        507 _main_buffer_1_65536_47:
      000000                        508 	.ds 2
      000002                        509 _main_buffer_n_65536_47:
      000002                        510 	.ds 60
      00003E                        511 _main_char_count_65536_47:
      00003E                        512 	.ds 2
      000040                        513 _main_buff0_stored_65536_47:
      000040                        514 	.ds 2
      000042                        515 _main_buffers_size_65536_47:
      000042                        516 	.ds 60
      00007E                        517 _main_num_65536_47:
      00007E                        518 	.ds 2
      000080                        519 _putchar_x_65536_89:
      000080                        520 	.ds 2
      000082                        521 _input_num_number_65536_92:
      000082                        522 	.ds 2
      000084                        523 _input_num_count_65536_92:
      000084                        524 	.ds 1
      000085                        525 _input_num_input_digit_65536_92:
      000085                        526 	.ds 1
      000086                        527 _input_num_input_digits_65536_92:
      000086                        528 	.ds 5
                                    529 ;--------------------------------------------------------
                                    530 ; absolute external ram data
                                    531 ;--------------------------------------------------------
                                    532 	.area XABS    (ABS,XDATA)
                                    533 ;--------------------------------------------------------
                                    534 ; external initialized ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area XISEG   (XDATA)
                                    537 	.area HOME    (CODE)
                                    538 	.area GSINIT0 (CODE)
                                    539 	.area GSINIT1 (CODE)
                                    540 	.area GSINIT2 (CODE)
                                    541 	.area GSINIT3 (CODE)
                                    542 	.area GSINIT4 (CODE)
                                    543 	.area GSINIT5 (CODE)
                                    544 	.area GSINIT  (CODE)
                                    545 	.area GSFINAL (CODE)
                                    546 	.area CSEG    (CODE)
                                    547 ;--------------------------------------------------------
                                    548 ; interrupt vector
                                    549 ;--------------------------------------------------------
                                    550 	.area HOME    (CODE)
      000000                        551 __interrupt_vect:
      000000 02r00r00         [24]  552 	ljmp	__sdcc_gsinit_startup
                                    553 ;--------------------------------------------------------
                                    554 ; global & static initialisations
                                    555 ;--------------------------------------------------------
                                    556 	.area HOME    (CODE)
                                    557 	.area GSINIT  (CODE)
                                    558 	.area GSFINAL (CODE)
                                    559 	.area GSINIT  (CODE)
                                    560 	.globl __sdcc_gsinit_startup
                                    561 	.globl __sdcc_program_startup
                                    562 	.globl __start__stack
                                    563 	.globl __mcs51_genXINIT
                                    564 	.globl __mcs51_genXRAMCLEAR
                                    565 	.globl __mcs51_genRAMCLEAR
                                    566 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  567 	ljmp	__sdcc_program_startup
                                    568 ;--------------------------------------------------------
                                    569 ; Home
                                    570 ;--------------------------------------------------------
                                    571 	.area HOME    (CODE)
                                    572 	.area HOME    (CODE)
      000003                        573 __sdcc_program_startup:
      000003 02r00r07         [24]  574 	ljmp	_main
                                    575 ;	return from main will return to caller
                                    576 ;--------------------------------------------------------
                                    577 ; code
                                    578 ;--------------------------------------------------------
                                    579 	.area CSEG    (CODE)
                                    580 ;------------------------------------------------------------
                                    581 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    582 ;------------------------------------------------------------
                                    583 ;	main.c:18: _sdcc_external_startup()
                                    584 ;	-----------------------------------------
                                    585 ;	 function _sdcc_external_startup
                                    586 ;	-----------------------------------------
      000000                        587 __sdcc_external_startup:
                           000007   588 	ar7 = 0x07
                           000006   589 	ar6 = 0x06
                           000005   590 	ar5 = 0x05
                           000004   591 	ar4 = 0x04
                           000003   592 	ar3 = 0x03
                           000002   593 	ar2 = 0x02
                           000001   594 	ar1 = 0x01
                           000000   595 	ar0 = 0x00
                                    596 ;	main.c:21: AUXR |= 0X0C;
      000000 43 8E 0C         [24]  597 	orl	_AUXR,#0x0c
                                    598 ;	main.c:22: return 0;
      000003 90 00 00         [24]  599 	mov	dptr,#0x0000
                                    600 ;	main.c:23: }
      000006 22               [24]  601 	ret
                                    602 ;------------------------------------------------------------
                                    603 ;Allocation info for local variables in function 'main'
                                    604 ;------------------------------------------------------------
                                    605 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                    606 ;sloc1                     Allocated with name '_main_sloc1_1_0'
                                    607 ;sloc2                     Allocated with name '_main_sloc2_1_0'
                                    608 ;sloc3                     Allocated with name '_main_sloc3_1_0'
                                    609 ;sloc4                     Allocated with name '_main_sloc4_1_0'
                                    610 ;sloc5                     Allocated with name '_main_sloc5_1_0'
                                    611 ;sloc6                     Allocated with name '_main_sloc6_1_0'
                                    612 ;sloc7                     Allocated with name '_main_sloc7_1_0'
                                    613 ;sloc8                     Allocated with name '_main_sloc8_1_0'
                                    614 ;buffer_0                  Allocated with name '_main_buffer_0_65536_47'
                                    615 ;buffer_1                  Allocated with name '_main_buffer_1_65536_47'
                                    616 ;buffer_n                  Allocated with name '_main_buffer_n_65536_47'
                                    617 ;buff0_start               Allocated with name '_main_buff0_start_65536_47'
                                    618 ;buff1_start               Allocated with name '_main_buff1_start_65536_47'
                                    619 ;in_char                   Allocated with name '_main_in_char_65536_47'
                                    620 ;char_count                Allocated with name '_main_char_count_65536_47'
                                    621 ;buff0_count               Allocated with name '_main_buff0_count_65536_47'
                                    622 ;buff0_stored              Allocated with name '_main_buff0_stored_65536_47'
                                    623 ;buffers_size              Allocated with name '_main_buffers_size_65536_47'
                                    624 ;k                         Allocated with name '_main_k_65536_47'
                                    625 ;buff_del                  Allocated with name '_main_buff_del_65536_47'
                                    626 ;buffer0_size              Allocated with name '_main_buffer0_size_65536_47'
                                    627 ;num                       Allocated with name '_main_num_65536_47'
                                    628 ;extra_buffers             Allocated with name '_main_extra_buffers_65536_47'
                                    629 ;buff_0_pt                 Allocated with name '_main_buff_0_pt_65536_47'
                                    630 ;i                         Allocated with name '_main_i_65536_47'
                                    631 ;x                         Allocated with name '_main_x_65536_47'
                                    632 ;------------------------------------------------------------
                                    633 ;	main.c:24: void main(void)
                                    634 ;	-----------------------------------------
                                    635 ;	 function main
                                    636 ;	-----------------------------------------
      000007                        637 _main:
                                    638 ;	main.c:32: unsigned int char_count=0;
      000007 90r00r3E         [24]  639 	mov	dptr,#_main_char_count_65536_47
      00000A E4               [12]  640 	clr	a
      00000B F0               [24]  641 	movx	@dptr,a
      00000C A3               [24]  642 	inc	dptr
      00000D F0               [24]  643 	movx	@dptr,a
                                    644 ;	main.c:34: unsigned int buff0_stored=0;
      00000E 90r00r40         [24]  645 	mov	dptr,#_main_buff0_stored_65536_47
      000011 F0               [24]  646 	movx	@dptr,a
      000012 A3               [24]  647 	inc	dptr
      000013 F0               [24]  648 	movx	@dptr,a
                                    649 ;	main.c:44: do
      000014                        650 00107$:
                                    651 ;	main.c:46: buffer0_size=buff0size();
      000014 12r0CrCE         [24]  652 	lcall	_buff0size
                                    653 ;	main.c:47: if((buffer_0=malloc(buffer0_size))==NULL)
      000017 AE 82            [24]  654 	mov	r6,dpl
      000019 AF 83            [24]  655 	mov  r7,dph
      00001B C0 07            [24]  656 	push	ar7
      00001D C0 06            [24]  657 	push	ar6
      00001F 12r00r00         [24]  658 	lcall	_malloc
      000022 AC 82            [24]  659 	mov	r4,dpl
      000024 AD 83            [24]  660 	mov	r5,dph
      000026 D0 06            [24]  661 	pop	ar6
      000028 D0 07            [24]  662 	pop	ar7
      00002A EC               [12]  663 	mov	a,r4
      00002B 4D               [12]  664 	orl	a,r5
      00002C 70 1F            [24]  665 	jnz	00102$
                                    666 ;	main.c:49: printf_tiny("memory insufficient. buffer 0 malloc failed\n\r");
      00002E C0 07            [24]  667 	push	ar7
      000030 C0 06            [24]  668 	push	ar6
      000032 C0 05            [24]  669 	push	ar5
      000034 C0 04            [24]  670 	push	ar4
      000036 74r00            [12]  671 	mov	a,#___str_0
      000038 C0 E0            [24]  672 	push	acc
      00003A 74s00            [12]  673 	mov	a,#(___str_0 >> 8)
      00003C C0 E0            [24]  674 	push	acc
      00003E 12r00r00         [24]  675 	lcall	_printf_tiny
      000041 15 81            [12]  676 	dec	sp
      000043 15 81            [12]  677 	dec	sp
      000045 D0 04            [24]  678 	pop	ar4
      000047 D0 05            [24]  679 	pop	ar5
      000049 D0 06            [24]  680 	pop	ar6
      00004B D0 07            [24]  681 	pop	ar7
      00004D                        682 00102$:
                                    683 ;	main.c:52: if((buffer_1=malloc(buffer0_size))==NULL)
      00004D 8E 82            [24]  684 	mov	dpl,r6
      00004F 8F 83            [24]  685 	mov	dph,r7
      000051 C0 07            [24]  686 	push	ar7
      000053 C0 06            [24]  687 	push	ar6
      000055 C0 05            [24]  688 	push	ar5
      000057 C0 04            [24]  689 	push	ar4
      000059 12r00r00         [24]  690 	lcall	_malloc
      00005C AA 82            [24]  691 	mov	r2,dpl
      00005E AB 83            [24]  692 	mov	r3,dph
      000060 D0 04            [24]  693 	pop	ar4
      000062 D0 05            [24]  694 	pop	ar5
      000064 D0 06            [24]  695 	pop	ar6
      000066 D0 07            [24]  696 	pop	ar7
      000068 90r00r00         [24]  697 	mov	dptr,#_main_buffer_1_65536_47
      00006B EA               [12]  698 	mov	a,r2
      00006C F0               [24]  699 	movx	@dptr,a
      00006D EB               [12]  700 	mov	a,r3
      00006E A3               [24]  701 	inc	dptr
      00006F F0               [24]  702 	movx	@dptr,a
      000070 EA               [12]  703 	mov	a,r2
      000071 4B               [12]  704 	orl	a,r3
      000072 70 56            [24]  705 	jnz	00104$
                                    706 ;	main.c:54: printf("buffer 1 malloc failed. free all malloc\n\r");
      000074 C0 02            [24]  707 	push	ar2
      000076 C0 03            [24]  708 	push	ar3
      000078 C0 07            [24]  709 	push	ar7
      00007A C0 06            [24]  710 	push	ar6
      00007C C0 05            [24]  711 	push	ar5
      00007E C0 04            [24]  712 	push	ar4
      000080 C0 03            [24]  713 	push	ar3
      000082 C0 02            [24]  714 	push	ar2
      000084 74r2E            [12]  715 	mov	a,#___str_1
      000086 C0 E0            [24]  716 	push	acc
      000088 74s00            [12]  717 	mov	a,#(___str_1 >> 8)
      00008A C0 E0            [24]  718 	push	acc
      00008C 74 80            [12]  719 	mov	a,#0x80
      00008E C0 E0            [24]  720 	push	acc
      000090 12r00r00         [24]  721 	lcall	_printf
      000093 15 81            [12]  722 	dec	sp
      000095 15 81            [12]  723 	dec	sp
      000097 15 81            [12]  724 	dec	sp
      000099 D0 02            [24]  725 	pop	ar2
      00009B D0 03            [24]  726 	pop	ar3
      00009D D0 04            [24]  727 	pop	ar4
      00009F D0 05            [24]  728 	pop	ar5
                                    729 ;	main.c:55: free(buffer_0);
      0000A1 8C 00            [24]  730 	mov	ar0,r4
      0000A3 8D 01            [24]  731 	mov	ar1,r5
      0000A5 7B 00            [12]  732 	mov	r3,#0x00
      0000A7 88 82            [24]  733 	mov	dpl,r0
      0000A9 89 83            [24]  734 	mov	dph,r1
      0000AB 8B F0            [24]  735 	mov	b,r3
      0000AD C0 05            [24]  736 	push	ar5
      0000AF C0 04            [24]  737 	push	ar4
      0000B1 C0 03            [24]  738 	push	ar3
      0000B3 C0 02            [24]  739 	push	ar2
      0000B5 12r00r00         [24]  740 	lcall	_free
      0000B8 D0 02            [24]  741 	pop	ar2
      0000BA D0 03            [24]  742 	pop	ar3
      0000BC D0 04            [24]  743 	pop	ar4
      0000BE D0 05            [24]  744 	pop	ar5
      0000C0 D0 06            [24]  745 	pop	ar6
      0000C2 D0 07            [24]  746 	pop	ar7
                                    747 ;	main.c:56: continue;
      0000C4 D0 03            [24]  748 	pop	ar3
      0000C6 D0 02            [24]  749 	pop	ar2
      0000C8 80 27            [24]  750 	sjmp	00108$
      0000CA                        751 00104$:
                                    752 ;	main.c:59: printf_tiny("Memory allocated successfully for buffer 0 and buffer 1\n\r");
      0000CA C0 07            [24]  753 	push	ar7
      0000CC C0 06            [24]  754 	push	ar6
      0000CE C0 05            [24]  755 	push	ar5
      0000D0 C0 04            [24]  756 	push	ar4
      0000D2 C0 03            [24]  757 	push	ar3
      0000D4 C0 02            [24]  758 	push	ar2
      0000D6 74r58            [12]  759 	mov	a,#___str_2
      0000D8 C0 E0            [24]  760 	push	acc
      0000DA 74s00            [12]  761 	mov	a,#(___str_2 >> 8)
      0000DC C0 E0            [24]  762 	push	acc
      0000DE 12r00r00         [24]  763 	lcall	_printf_tiny
      0000E1 15 81            [12]  764 	dec	sp
      0000E3 15 81            [12]  765 	dec	sp
      0000E5 D0 02            [24]  766 	pop	ar2
      0000E7 D0 03            [24]  767 	pop	ar3
      0000E9 D0 04            [24]  768 	pop	ar4
      0000EB D0 05            [24]  769 	pop	ar5
      0000ED D0 06            [24]  770 	pop	ar6
      0000EF D0 07            [24]  771 	pop	ar7
      0000F1                        772 00108$:
                                    773 ;	main.c:61: }while(buffer_1==NULL || buffer_0==NULL );
      0000F1 EA               [12]  774 	mov	a,r2
      0000F2 4B               [12]  775 	orl	a,r3
      0000F3 70 03            [24]  776 	jnz	00336$
      0000F5 02r00r14         [24]  777 	ljmp	00107$
      0000F8                        778 00336$:
      0000F8 EC               [12]  779 	mov	a,r4
      0000F9 4D               [12]  780 	orl	a,r5
      0000FA 70 03            [24]  781 	jnz	00337$
      0000FC 02r00r14         [24]  782 	ljmp	00107$
      0000FF                        783 00337$:
                                    784 ;	main.c:63: buff0_start=(uint16_t)buffer_0;
      0000FF 8C 00            [24]  785 	mov	ar0,r4
      000101 8D 01            [24]  786 	mov	ar1,r5
                                    787 ;	main.c:64: buff1_start=(uint16_t)buffer_1;
      000103 8A*0B            [24]  788 	mov	_main_sloc6_1_0,r2
      000105 8B*0C            [24]  789 	mov	(_main_sloc6_1_0 + 1),r3
                                    790 ;	main.c:65: printf_tiny("buffer 0 starts at address: 0x%x\n\r",buff0_start);
      000107 C0 07            [24]  791 	push	ar7
      000109 C0 06            [24]  792 	push	ar6
      00010B C0 05            [24]  793 	push	ar5
      00010D C0 04            [24]  794 	push	ar4
      00010F C0 01            [24]  795 	push	ar1
      000111 C0 00            [24]  796 	push	ar0
      000113 C0 00            [24]  797 	push	ar0
      000115 C0 01            [24]  798 	push	ar1
      000117 74r92            [12]  799 	mov	a,#___str_3
      000119 C0 E0            [24]  800 	push	acc
      00011B 74s00            [12]  801 	mov	a,#(___str_3 >> 8)
      00011D C0 E0            [24]  802 	push	acc
      00011F 12r00r00         [24]  803 	lcall	_printf_tiny
      000122 E5 81            [12]  804 	mov	a,sp
      000124 24 FC            [12]  805 	add	a,#0xfc
      000126 F5 81            [12]  806 	mov	sp,a
                                    807 ;	main.c:66: printf_tiny("buffer 1 starts at address: 0x%x\n\r",buff1_start);
      000128 C0*0B            [24]  808 	push	_main_sloc6_1_0
      00012A C0*0C            [24]  809 	push	(_main_sloc6_1_0 + 1)
      00012C 74rB5            [12]  810 	mov	a,#___str_4
      00012E C0 E0            [24]  811 	push	acc
      000130 74s00            [12]  812 	mov	a,#(___str_4 >> 8)
      000132 C0 E0            [24]  813 	push	acc
      000134 12r00r00         [24]  814 	lcall	_printf_tiny
      000137 E5 81            [12]  815 	mov	a,sp
      000139 24 FC            [12]  816 	add	a,#0xfc
      00013B F5 81            [12]  817 	mov	sp,a
      00013D D0 00            [24]  818 	pop	ar0
      00013F D0 01            [24]  819 	pop	ar1
      000141 D0 04            [24]  820 	pop	ar4
      000143 D0 05            [24]  821 	pop	ar5
      000145 D0 06            [24]  822 	pop	ar6
      000147 D0 07            [24]  823 	pop	ar7
                                    824 ;	main.c:68: while(1)
      000149 E4               [12]  825 	clr	a
      00014A F5*00            [12]  826 	mov	_main_sloc0_1_0,a
      00014C F5*01            [12]  827 	mov	(_main_sloc0_1_0 + 1),a
      00014E 75*02 02         [24]  828 	mov	_main_sloc1_1_0,#0x02
                                    829 ;	1-genFromRTrack replaced	mov	(_main_sloc1_1_0 + 1),#0x00
      000151 F5*03            [12]  830 	mov	(_main_sloc1_1_0 + 1),a
      000153 F5*04            [12]  831 	mov	_main_sloc2_1_0,a
      000155 F5*05            [12]  832 	mov	(_main_sloc2_1_0 + 1),a
      000157                        833 00167$:
                                    834 ;	main.c:71: printf_tiny("\n\r OPTIONS \n\r");
      000157 C0 00            [24]  835 	push	ar0
      000159 C0 01            [24]  836 	push	ar1
      00015B C0 07            [24]  837 	push	ar7
      00015D C0 06            [24]  838 	push	ar6
      00015F C0 05            [24]  839 	push	ar5
      000161 C0 04            [24]  840 	push	ar4
      000163 C0 01            [24]  841 	push	ar1
      000165 C0 00            [24]  842 	push	ar0
      000167 74rD8            [12]  843 	mov	a,#___str_5
      000169 C0 E0            [24]  844 	push	acc
      00016B 74s00            [12]  845 	mov	a,#(___str_5 >> 8)
      00016D C0 E0            [24]  846 	push	acc
      00016F 12r00r00         [24]  847 	lcall	_printf_tiny
      000172 15 81            [12]  848 	dec	sp
      000174 15 81            [12]  849 	dec	sp
                                    850 ;	main.c:72: printf_tiny("You can enter storage characters from 'A' to 'Z' to store in buffer 0\n\r");
      000176 74rE6            [12]  851 	mov	a,#___str_6
      000178 C0 E0            [24]  852 	push	acc
      00017A 74s00            [12]  853 	mov	a,#(___str_6 >> 8)
      00017C C0 E0            [24]  854 	push	acc
      00017E 12r00r00         [24]  855 	lcall	_printf_tiny
      000181 15 81            [12]  856 	dec	sp
      000183 15 81            [12]  857 	dec	sp
                                    858 ;	main.c:73: printf_tiny("Press + to create a new buffer of size between 32 and 4800 bytes\n\r");
      000185 74r2E            [12]  859 	mov	a,#___str_7
      000187 C0 E0            [24]  860 	push	acc
      000189 74s01            [12]  861 	mov	a,#(___str_7 >> 8)
      00018B C0 E0            [24]  862 	push	acc
      00018D 12r00r00         [24]  863 	lcall	_printf_tiny
      000190 15 81            [12]  864 	dec	sp
      000192 15 81            [12]  865 	dec	sp
                                    866 ;	main.c:74: printf_tiny("Press - to delete a buffer.\n\r");
      000194 74r71            [12]  867 	mov	a,#___str_8
      000196 C0 E0            [24]  868 	push	acc
      000198 74s01            [12]  869 	mov	a,#(___str_8 >> 8)
      00019A C0 E0            [24]  870 	push	acc
      00019C 12r00r00         [24]  871 	lcall	_printf_tiny
      00019F 15 81            [12]  872 	dec	sp
      0001A1 15 81            [12]  873 	dec	sp
                                    874 ;	main.c:75: printf_tiny("Press ? to generate a heap report.\n\r");
      0001A3 74r8F            [12]  875 	mov	a,#___str_9
      0001A5 C0 E0            [24]  876 	push	acc
      0001A7 74s01            [12]  877 	mov	a,#(___str_9 >> 8)
      0001A9 C0 E0            [24]  878 	push	acc
      0001AB 12r00r00         [24]  879 	lcall	_printf_tiny
      0001AE 15 81            [12]  880 	dec	sp
      0001B0 15 81            [12]  881 	dec	sp
                                    882 ;	main.c:76: printf_tiny("Press = to display current contents of buffer 0.\n\r");
      0001B2 74rB4            [12]  883 	mov	a,#___str_10
      0001B4 C0 E0            [24]  884 	push	acc
      0001B6 74s01            [12]  885 	mov	a,#(___str_10 >> 8)
      0001B8 C0 E0            [24]  886 	push	acc
      0001BA 12r00r00         [24]  887 	lcall	_printf_tiny
      0001BD 15 81            [12]  888 	dec	sp
      0001BF 15 81            [12]  889 	dec	sp
                                    890 ;	main.c:77: printf_tiny("Press @ to free all buffers and start program again.\n\r");
      0001C1 74rE7            [12]  891 	mov	a,#___str_11
      0001C3 C0 E0            [24]  892 	push	acc
      0001C5 74s01            [12]  893 	mov	a,#(___str_11 >> 8)
      0001C7 C0 E0            [24]  894 	push	acc
      0001C9 12r00r00         [24]  895 	lcall	_printf_tiny
      0001CC 15 81            [12]  896 	dec	sp
      0001CE 15 81            [12]  897 	dec	sp
                                    898 ;	main.c:79: printf_tiny("\n\r enter the input\n\r");
      0001D0 74r1E            [12]  899 	mov	a,#___str_12
      0001D2 C0 E0            [24]  900 	push	acc
      0001D4 74s02            [12]  901 	mov	a,#(___str_12 >> 8)
      0001D6 C0 E0            [24]  902 	push	acc
      0001D8 12r00r00         [24]  903 	lcall	_printf_tiny
      0001DB 15 81            [12]  904 	dec	sp
      0001DD 15 81            [12]  905 	dec	sp
      0001DF D0 00            [24]  906 	pop	ar0
      0001E1 D0 01            [24]  907 	pop	ar1
                                    908 ;	main.c:80: in_char=getchar();
      0001E3 12r0Dr81         [24]  909 	lcall	_getchar
      0001E6 A8 82            [24]  910 	mov	r0,dpl
      0001E8 A9 83            [24]  911 	mov	r1,dph
      0001EA 88*06            [24]  912 	mov	_main_sloc3_1_0,r0
                                    913 ;	main.c:81: char_count++;
      0001EC 90r00r3E         [24]  914 	mov	dptr,#_main_char_count_65536_47
      0001EF E0               [24]  915 	movx	a,@dptr
      0001F0 24 01            [12]  916 	add	a,#0x01
      0001F2 F0               [24]  917 	movx	@dptr,a
      0001F3 A3               [24]  918 	inc	dptr
      0001F4 E0               [24]  919 	movx	a,@dptr
      0001F5 34 00            [12]  920 	addc	a,#0x00
      0001F7 F0               [24]  921 	movx	@dptr,a
                                    922 ;	main.c:82: putchar(in_char);
      0001F8 85*06*07         [24]  923 	mov	_main_sloc4_1_0,_main_sloc3_1_0
      0001FB 75*08 00         [24]  924 	mov	(_main_sloc4_1_0 + 1),#0x00
      0001FE 85*07 82         [24]  925 	mov	dpl,_main_sloc4_1_0
      000201 85*08 83         [24]  926 	mov	dph,(_main_sloc4_1_0 + 1)
      000204 C0 01            [24]  927 	push	ar1
      000206 C0 00            [24]  928 	push	ar0
      000208 12r0Dr8F         [24]  929 	lcall	_putchar
      00020B D0 00            [24]  930 	pop	ar0
      00020D D0 01            [24]  931 	pop	ar1
      00020F D0 04            [24]  932 	pop	ar4
      000211 D0 05            [24]  933 	pop	ar5
      000213 D0 06            [24]  934 	pop	ar6
      000215 D0 07            [24]  935 	pop	ar7
                                    936 ;	main.c:84: if(((in_char<='Z')&&(in_char>='A'))&&(buff0_count<buffer0_size))
      000217 C3               [12]  937 	clr	c
      000218 74 5A            [12]  938 	mov	a,#0x5a
      00021A 95*06            [12]  939 	subb	a,_main_sloc3_1_0
      00021C D0 01            [24]  940 	pop	ar1
      00021E D0 00            [24]  941 	pop	ar0
      000220 40 3F            [24]  942 	jc	00162$
      000222 74 BF            [12]  943 	mov	a,#0x100 - 0x41
      000224 25*06            [12]  944 	add	a,_main_sloc3_1_0
      000226 50 39            [24]  945 	jnc	00162$
      000228 C0 00            [24]  946 	push	ar0
      00022A C0 01            [24]  947 	push	ar1
      00022C 8E 00            [24]  948 	mov	ar0,r6
      00022E 8F 01            [24]  949 	mov	ar1,r7
      000230 C3               [12]  950 	clr	c
      000231 E5*00            [12]  951 	mov	a,_main_sloc0_1_0
      000233 98               [12]  952 	subb	a,r0
      000234 E5*01            [12]  953 	mov	a,(_main_sloc0_1_0 + 1)
      000236 99               [12]  954 	subb	a,r1
      000237 D0 01            [24]  955 	pop	ar1
      000239 D0 00            [24]  956 	pop	ar0
      00023B 50 24            [24]  957 	jnc	00162$
                                    958 ;	main.c:87: *((buffer_0)+buff0_count)=in_char;
      00023D E5*00            [12]  959 	mov	a,_main_sloc0_1_0
      00023F 2C               [12]  960 	add	a,r4
      000240 F5 82            [12]  961 	mov	dpl,a
      000242 E5*01            [12]  962 	mov	a,(_main_sloc0_1_0 + 1)
      000244 3D               [12]  963 	addc	a,r5
      000245 F5 83            [12]  964 	mov	dph,a
      000247 E5*06            [12]  965 	mov	a,_main_sloc3_1_0
      000249 F0               [24]  966 	movx	@dptr,a
                                    967 ;	main.c:88: buff0_count++;
      00024A 05*00            [12]  968 	inc	_main_sloc0_1_0
      00024C E4               [12]  969 	clr	a
      00024D B5*00 02         [24]  970 	cjne	a,_main_sloc0_1_0,00341$
      000250 05*01            [12]  971 	inc	(_main_sloc0_1_0 + 1)
      000252                        972 00341$:
                                    973 ;	main.c:89: buff0_stored++;
      000252 90r00r40         [24]  974 	mov	dptr,#_main_buff0_stored_65536_47
      000255 E0               [24]  975 	movx	a,@dptr
      000256 24 01            [12]  976 	add	a,#0x01
      000258 F0               [24]  977 	movx	@dptr,a
      000259 A3               [24]  978 	inc	dptr
      00025A E0               [24]  979 	movx	a,@dptr
      00025B 34 00            [12]  980 	addc	a,#0x00
      00025D F0               [24]  981 	movx	@dptr,a
      00025E 02r01r57         [24]  982 	ljmp	00167$
      000261                        983 00162$:
                                    984 ;	main.c:93: else if(((buff0_count) == (buffer0_size)) && (in_char != '+') && (in_char != '-') && (in_char != '?') && (in_char != '=') && (in_char != '@'))
      000261 8E*09            [24]  985 	mov	_main_sloc5_1_0,r6
      000263 8F*0A            [24]  986 	mov	(_main_sloc5_1_0 + 1),r7
      000265 E5*09            [12]  987 	mov	a,_main_sloc5_1_0
      000267 B5*00 5B         [24]  988 	cjne	a,_main_sloc0_1_0,00154$
      00026A E5*0A            [12]  989 	mov	a,(_main_sloc5_1_0 + 1)
      00026C B5*01 56         [24]  990 	cjne	a,(_main_sloc0_1_0 + 1),00154$
      00026F 74 2B            [12]  991 	mov	a,#0x2b
      000271 B5*06 02         [24]  992 	cjne	a,_main_sloc3_1_0,00344$
      000274 80 4F            [24]  993 	sjmp	00154$
      000276                        994 00344$:
      000276 74 2D            [12]  995 	mov	a,#0x2d
      000278 B5*06 02         [24]  996 	cjne	a,_main_sloc3_1_0,00345$
      00027B 80 48            [24]  997 	sjmp	00154$
      00027D                        998 00345$:
      00027D 74 3F            [12]  999 	mov	a,#0x3f
      00027F B5*06 02         [24] 1000 	cjne	a,_main_sloc3_1_0,00346$
      000282 80 41            [24] 1001 	sjmp	00154$
      000284                       1002 00346$:
      000284 74 3D            [12] 1003 	mov	a,#0x3d
      000286 B5*06 02         [24] 1004 	cjne	a,_main_sloc3_1_0,00347$
      000289 80 3A            [24] 1005 	sjmp	00154$
      00028B                       1006 00347$:
      00028B 74 40            [12] 1007 	mov	a,#0x40
      00028D B5*06 02         [24] 1008 	cjne	a,_main_sloc3_1_0,00348$
      000290 80 33            [24] 1009 	sjmp	00154$
      000292                       1010 00348$:
                                   1011 ;	main.c:95: putchar(in_char);
      000292 85*07 82         [24] 1012 	mov	dpl,_main_sloc4_1_0
      000295 85*08 83         [24] 1013 	mov	dph,(_main_sloc4_1_0 + 1)
      000298 C0 07            [24] 1014 	push	ar7
      00029A C0 06            [24] 1015 	push	ar6
      00029C C0 05            [24] 1016 	push	ar5
      00029E C0 04            [24] 1017 	push	ar4
      0002A0 C0 01            [24] 1018 	push	ar1
      0002A2 C0 00            [24] 1019 	push	ar0
      0002A4 12r0Dr8F         [24] 1020 	lcall	_putchar
                                   1021 ;	main.c:96: printf_tiny("\n\rBuffer 0 is full.\n\r");
      0002A7 74r33            [12] 1022 	mov	a,#___str_13
      0002A9 C0 E0            [24] 1023 	push	acc
      0002AB 74s02            [12] 1024 	mov	a,#(___str_13 >> 8)
      0002AD C0 E0            [24] 1025 	push	acc
      0002AF 12r00r00         [24] 1026 	lcall	_printf_tiny
      0002B2 15 81            [12] 1027 	dec	sp
      0002B4 15 81            [12] 1028 	dec	sp
      0002B6 D0 00            [24] 1029 	pop	ar0
      0002B8 D0 01            [24] 1030 	pop	ar1
      0002BA D0 04            [24] 1031 	pop	ar4
      0002BC D0 05            [24] 1032 	pop	ar5
      0002BE D0 06            [24] 1033 	pop	ar6
      0002C0 D0 07            [24] 1034 	pop	ar7
      0002C2 02r01r57         [24] 1035 	ljmp	00167$
      0002C5                       1036 00154$:
                                   1037 ;	main.c:98: else if(in_char=='+')
      0002C5 74 2B            [12] 1038 	mov	a,#0x2b
      0002C7 B5*06 02         [24] 1039 	cjne	a,_main_sloc3_1_0,00349$
      0002CA 80 03            [24] 1040 	sjmp	00350$
      0002CC                       1041 00349$:
      0002CC 02r04r40         [24] 1042 	ljmp	00151$
      0002CF                       1043 00350$:
                                   1044 ;	main.c:100: num=input_num();
      0002CF C0 00            [24] 1045 	push	ar0
      0002D1 C0 01            [24] 1046 	push	ar1
      0002D3 C0 07            [24] 1047 	push	ar7
      0002D5 C0 06            [24] 1048 	push	ar6
      0002D7 C0 05            [24] 1049 	push	ar5
      0002D9 C0 04            [24] 1050 	push	ar4
      0002DB 12r0DrAE         [24] 1051 	lcall	_input_num
      0002DE A8 82            [24] 1052 	mov	r0,dpl
      0002E0 A9 83            [24] 1053 	mov	r1,dph
      0002E2 88*07            [24] 1054 	mov	_main_sloc4_1_0,r0
      0002E4 89*08            [24] 1055 	mov	(_main_sloc4_1_0 + 1),r1
                                   1056 ;	main.c:101: printf("input_num=%d",num);
      0002E6 C0 01            [24] 1057 	push	ar1
      0002E8 C0 00            [24] 1058 	push	ar0
      0002EA C0*07            [24] 1059 	push	_main_sloc4_1_0
      0002EC C0*08            [24] 1060 	push	(_main_sloc4_1_0 + 1)
      0002EE 74r49            [12] 1061 	mov	a,#___str_14
      0002F0 C0 E0            [24] 1062 	push	acc
      0002F2 74s02            [12] 1063 	mov	a,#(___str_14 >> 8)
      0002F4 C0 E0            [24] 1064 	push	acc
      0002F6 74 80            [12] 1065 	mov	a,#0x80
      0002F8 C0 E0            [24] 1066 	push	acc
      0002FA 12r00r00         [24] 1067 	lcall	_printf
      0002FD E5 81            [12] 1068 	mov	a,sp
      0002FF 24 FB            [12] 1069 	add	a,#0xfb
      000301 F5 81            [12] 1070 	mov	sp,a
      000303 D0 00            [24] 1071 	pop	ar0
      000305 D0 01            [24] 1072 	pop	ar1
      000307 D0 04            [24] 1073 	pop	ar4
      000309 D0 05            [24] 1074 	pop	ar5
      00030B D0 06            [24] 1075 	pop	ar6
      00030D D0 07            [24] 1076 	pop	ar7
                                   1077 ;	main.c:102: if((num<20) || (num>400) )
      00030F C3               [12] 1078 	clr	c
      000310 E5*07            [12] 1079 	mov	a,_main_sloc4_1_0
      000312 94 14            [12] 1080 	subb	a,#0x14
      000314 E5*08            [12] 1081 	mov	a,(_main_sloc4_1_0 + 1)
      000316 64 80            [12] 1082 	xrl	a,#0x80
      000318 94 80            [12] 1083 	subb	a,#0x80
      00031A D0 01            [24] 1084 	pop	ar1
      00031C D0 00            [24] 1085 	pop	ar0
      00031E 40 10            [24] 1086 	jc	00110$
      000320 74 90            [12] 1087 	mov	a,#0x90
      000322 95*07            [12] 1088 	subb	a,_main_sloc4_1_0
      000324 74 81            [12] 1089 	mov	a,#(0x01 ^ 0x80)
      000326 85*08 F0         [24] 1090 	mov	b,(_main_sloc4_1_0 + 1)
      000329 63 F0 80         [24] 1091 	xrl	b,#0x80
      00032C 95 F0            [12] 1092 	subb	a,b
      00032E 50 09            [24] 1093 	jnc	00111$
      000330                       1094 00110$:
                                   1095 ;	main.c:104: num=0;
      000330 90r00r7E         [24] 1096 	mov	dptr,#_main_num_65536_47
      000333 E4               [12] 1097 	clr	a
      000334 F0               [24] 1098 	movx	@dptr,a
      000335 A3               [24] 1099 	inc	dptr
      000336 F0               [24] 1100 	movx	@dptr,a
      000337 80 0A            [24] 1101 	sjmp	00112$
      000339                       1102 00111$:
                                   1103 ;	main.c:107: num=num;
      000339 90r00r7E         [24] 1104 	mov	dptr,#_main_num_65536_47
      00033C E5*07            [12] 1105 	mov	a,_main_sloc4_1_0
      00033E F0               [24] 1106 	movx	@dptr,a
      00033F E5*08            [12] 1107 	mov	a,(_main_sloc4_1_0 + 1)
      000341 A3               [24] 1108 	inc	dptr
      000342 F0               [24] 1109 	movx	@dptr,a
      000343                       1110 00112$:
                                   1111 ;	main.c:110: buffer_n[extra_buffers]==malloc(num);
      000343 C0 00            [24] 1112 	push	ar0
      000345 C0 01            [24] 1113 	push	ar1
      000347 90r00r7E         [24] 1114 	mov	dptr,#_main_num_65536_47
      00034A E0               [24] 1115 	movx	a,@dptr
      00034B F5*07            [12] 1116 	mov	_main_sloc4_1_0,a
      00034D A3               [24] 1117 	inc	dptr
      00034E E0               [24] 1118 	movx	a,@dptr
      00034F F5*08            [12] 1119 	mov	(_main_sloc4_1_0 + 1),a
      000351 85*07 82         [24] 1120 	mov	dpl,_main_sloc4_1_0
      000354 85*08 83         [24] 1121 	mov	dph,(_main_sloc4_1_0 + 1)
      000357 C0 07            [24] 1122 	push	ar7
      000359 C0 06            [24] 1123 	push	ar6
      00035B C0 05            [24] 1124 	push	ar5
      00035D C0 04            [24] 1125 	push	ar4
      00035F C0 01            [24] 1126 	push	ar1
      000361 C0 00            [24] 1127 	push	ar0
      000363 12r00r00         [24] 1128 	lcall	_malloc
      000366 D0 00            [24] 1129 	pop	ar0
      000368 D0 01            [24] 1130 	pop	ar1
      00036A D0 04            [24] 1131 	pop	ar4
      00036C D0 05            [24] 1132 	pop	ar5
      00036E D0 06            [24] 1133 	pop	ar6
      000370 D0 07            [24] 1134 	pop	ar7
                                   1135 ;	main.c:112: if(buffer_n[extra_buffers]==0)
      000372 E5*04            [12] 1136 	mov	a,_main_sloc2_1_0
      000374 25*04            [12] 1137 	add	a,_main_sloc2_1_0
      000376 F8               [12] 1138 	mov	r0,a
      000377 E5*05            [12] 1139 	mov	a,(_main_sloc2_1_0 + 1)
      000379 33               [12] 1140 	rlc	a
      00037A F9               [12] 1141 	mov	r1,a
      00037B E8               [12] 1142 	mov	a,r0
      00037C 24r02            [12] 1143 	add	a,#_main_buffer_n_65536_47
      00037E F5 82            [12] 1144 	mov	dpl,a
      000380 E9               [12] 1145 	mov	a,r1
      000381 34s00            [12] 1146 	addc	a,#(_main_buffer_n_65536_47 >> 8)
      000383 F5 83            [12] 1147 	mov	dph,a
      000385 E0               [24] 1148 	movx	a,@dptr
      000386 F8               [12] 1149 	mov	r0,a
      000387 A3               [24] 1150 	inc	dptr
      000388 E0               [24] 1151 	movx	a,@dptr
      000389 48               [12] 1152 	orl	a,r0
      00038A D0 01            [24] 1153 	pop	ar1
      00038C D0 00            [24] 1154 	pop	ar0
      00038E 70 45            [24] 1155 	jnz	00115$
                                   1156 ;	main.c:114: printf("\n\r memory allocation failed for buffer %d\n\r",extra_buffers+2);
      000390 C0 00            [24] 1157 	push	ar0
      000392 C0 01            [24] 1158 	push	ar1
      000394 74 02            [12] 1159 	mov	a,#0x02
      000396 25*04            [12] 1160 	add	a,_main_sloc2_1_0
      000398 F8               [12] 1161 	mov	r0,a
      000399 E4               [12] 1162 	clr	a
      00039A 35*05            [12] 1163 	addc	a,(_main_sloc2_1_0 + 1)
      00039C F9               [12] 1164 	mov	r1,a
      00039D C0 07            [24] 1165 	push	ar7
      00039F C0 06            [24] 1166 	push	ar6
      0003A1 C0 05            [24] 1167 	push	ar5
      0003A3 C0 04            [24] 1168 	push	ar4
      0003A5 C0 01            [24] 1169 	push	ar1
      0003A7 C0 00            [24] 1170 	push	ar0
      0003A9 C0 00            [24] 1171 	push	ar0
      0003AB C0 01            [24] 1172 	push	ar1
      0003AD 74r56            [12] 1173 	mov	a,#___str_15
      0003AF C0 E0            [24] 1174 	push	acc
      0003B1 74s02            [12] 1175 	mov	a,#(___str_15 >> 8)
      0003B3 C0 E0            [24] 1176 	push	acc
      0003B5 74 80            [12] 1177 	mov	a,#0x80
      0003B7 C0 E0            [24] 1178 	push	acc
      0003B9 12r00r00         [24] 1179 	lcall	_printf
      0003BC E5 81            [12] 1180 	mov	a,sp
      0003BE 24 FB            [12] 1181 	add	a,#0xfb
      0003C0 F5 81            [12] 1182 	mov	sp,a
      0003C2 D0 00            [24] 1183 	pop	ar0
      0003C4 D0 01            [24] 1184 	pop	ar1
      0003C6 D0 04            [24] 1185 	pop	ar4
      0003C8 D0 05            [24] 1186 	pop	ar5
      0003CA D0 06            [24] 1187 	pop	ar6
      0003CC D0 07            [24] 1188 	pop	ar7
      0003CE D0 01            [24] 1189 	pop	ar1
      0003D0 D0 00            [24] 1190 	pop	ar0
      0003D2 02r01r57         [24] 1191 	ljmp	00167$
      0003D5                       1192 00115$:
                                   1193 ;	main.c:120: printf_tiny("\n\r memory allocation successful for buffer %d\n\r",extra_buffers+2);
      0003D5 C0 00            [24] 1194 	push	ar0
      0003D7 C0 01            [24] 1195 	push	ar1
      0003D9 74 02            [12] 1196 	mov	a,#0x02
      0003DB 25*04            [12] 1197 	add	a,_main_sloc2_1_0
      0003DD F8               [12] 1198 	mov	r0,a
      0003DE E4               [12] 1199 	clr	a
      0003DF 35*05            [12] 1200 	addc	a,(_main_sloc2_1_0 + 1)
      0003E1 F9               [12] 1201 	mov	r1,a
      0003E2 C0 07            [24] 1202 	push	ar7
      0003E4 C0 06            [24] 1203 	push	ar6
      0003E6 C0 05            [24] 1204 	push	ar5
      0003E8 C0 04            [24] 1205 	push	ar4
      0003EA C0 01            [24] 1206 	push	ar1
      0003EC C0 00            [24] 1207 	push	ar0
      0003EE C0 00            [24] 1208 	push	ar0
      0003F0 C0 01            [24] 1209 	push	ar1
      0003F2 74r82            [12] 1210 	mov	a,#___str_16
      0003F4 C0 E0            [24] 1211 	push	acc
      0003F6 74s02            [12] 1212 	mov	a,#(___str_16 >> 8)
      0003F8 C0 E0            [24] 1213 	push	acc
      0003FA 12r00r00         [24] 1214 	lcall	_printf_tiny
      0003FD E5 81            [12] 1215 	mov	a,sp
      0003FF 24 FC            [12] 1216 	add	a,#0xfc
      000401 F5 81            [12] 1217 	mov	sp,a
      000403 D0 00            [24] 1218 	pop	ar0
      000405 D0 01            [24] 1219 	pop	ar1
      000407 D0 04            [24] 1220 	pop	ar4
      000409 D0 05            [24] 1221 	pop	ar5
      00040B D0 06            [24] 1222 	pop	ar6
      00040D D0 07            [24] 1223 	pop	ar7
                                   1224 ;	main.c:122: buffers_size[k]=num;
      00040F E5*02            [12] 1225 	mov	a,_main_sloc1_1_0
      000411 25*02            [12] 1226 	add	a,_main_sloc1_1_0
      000413 F8               [12] 1227 	mov	r0,a
      000414 E5*03            [12] 1228 	mov	a,(_main_sloc1_1_0 + 1)
      000416 33               [12] 1229 	rlc	a
      000417 F9               [12] 1230 	mov	r1,a
      000418 E8               [12] 1231 	mov	a,r0
      000419 24r42            [12] 1232 	add	a,#_main_buffers_size_65536_47
      00041B F5 82            [12] 1233 	mov	dpl,a
      00041D E9               [12] 1234 	mov	a,r1
      00041E 34s00            [12] 1235 	addc	a,#(_main_buffers_size_65536_47 >> 8)
      000420 F5 83            [12] 1236 	mov	dph,a
      000422 E5*07            [12] 1237 	mov	a,_main_sloc4_1_0
      000424 F0               [24] 1238 	movx	@dptr,a
      000425 E5*08            [12] 1239 	mov	a,(_main_sloc4_1_0 + 1)
      000427 A3               [24] 1240 	inc	dptr
      000428 F0               [24] 1241 	movx	@dptr,a
                                   1242 ;	main.c:123: k++;
      000429 05*02            [12] 1243 	inc	_main_sloc1_1_0
      00042B E4               [12] 1244 	clr	a
      00042C B5*02 02         [24] 1245 	cjne	a,_main_sloc1_1_0,00354$
      00042F 05*03            [12] 1246 	inc	(_main_sloc1_1_0 + 1)
      000431                       1247 00354$:
                                   1248 ;	main.c:124: extra_buffers++;
      000431 05*04            [12] 1249 	inc	_main_sloc2_1_0
      000433 E4               [12] 1250 	clr	a
      000434 B5*04 02         [24] 1251 	cjne	a,_main_sloc2_1_0,00355$
      000437 05*05            [12] 1252 	inc	(_main_sloc2_1_0 + 1)
      000439                       1253 00355$:
      000439 D0 01            [24] 1254 	pop	ar1
      00043B D0 00            [24] 1255 	pop	ar0
      00043D 02r01r57         [24] 1256 	ljmp	00167$
      000440                       1257 00151$:
                                   1258 ;	main.c:128: else if(in_char=='-')
      000440 74 2D            [12] 1259 	mov	a,#0x2d
      000442 B5*06 02         [24] 1260 	cjne	a,_main_sloc3_1_0,00356$
      000445 80 03            [24] 1261 	sjmp	00357$
      000447                       1262 00356$:
      000447 02r05rE8         [24] 1263 	ljmp	00148$
      00044A                       1264 00357$:
                                   1265 ;	main.c:130: buff_del=input_num();
      00044A C0 00            [24] 1266 	push	ar0
      00044C C0 01            [24] 1267 	push	ar1
      00044E C0 07            [24] 1268 	push	ar7
      000450 C0 06            [24] 1269 	push	ar6
      000452 C0 05            [24] 1270 	push	ar5
      000454 C0 04            [24] 1271 	push	ar4
      000456 12r0DrAE         [24] 1272 	lcall	_input_num
      000459 A8 82            [24] 1273 	mov	r0,dpl
      00045B A9 83            [24] 1274 	mov	r1,dph
      00045D D0 04            [24] 1275 	pop	ar4
      00045F D0 05            [24] 1276 	pop	ar5
      000461 D0 06            [24] 1277 	pop	ar6
      000463 D0 07            [24] 1278 	pop	ar7
      000465 88*07            [24] 1279 	mov	_main_sloc4_1_0,r0
      000467 89*08            [24] 1280 	mov	(_main_sloc4_1_0 + 1),r1
                                   1281 ;	main.c:131: if(buff_del==1)
      000469 74 01            [12] 1282 	mov	a,#0x01
      00046B B5*07 06         [24] 1283 	cjne	a,_main_sloc4_1_0,00358$
      00046E 14               [12] 1284 	dec	a
      00046F B5*08 02         [24] 1285 	cjne	a,(_main_sloc4_1_0 + 1),00358$
      000472 80 06            [24] 1286 	sjmp	00359$
      000474                       1287 00358$:
      000474 D0 01            [24] 1288 	pop	ar1
      000476 D0 00            [24] 1289 	pop	ar0
      000478 80 48            [24] 1290 	sjmp	00125$
      00047A                       1291 00359$:
                                   1292 ;	main.c:134: free(buffer_1);
      00047A 90r00r00         [24] 1293 	mov	dptr,#_main_buffer_1_65536_47
      00047D E0               [24] 1294 	movx	a,@dptr
      00047E F8               [12] 1295 	mov	r0,a
      00047F A3               [24] 1296 	inc	dptr
      000480 E0               [24] 1297 	movx	a,@dptr
      000481 F9               [12] 1298 	mov	r1,a
      000482 7B 00            [12] 1299 	mov	r3,#0x00
      000484 88 82            [24] 1300 	mov	dpl,r0
      000486 89 83            [24] 1301 	mov	dph,r1
      000488 8B F0            [24] 1302 	mov	b,r3
      00048A C0 07            [24] 1303 	push	ar7
      00048C C0 06            [24] 1304 	push	ar6
      00048E C0 05            [24] 1305 	push	ar5
      000490 C0 04            [24] 1306 	push	ar4
      000492 C0 01            [24] 1307 	push	ar1
      000494 C0 00            [24] 1308 	push	ar0
      000496 12r00r00         [24] 1309 	lcall	_free
                                   1310 ;	main.c:135: printf_tiny("\n\r Buffer 1 is deleted and memory is freed\n\r");
      000499 74rB2            [12] 1311 	mov	a,#___str_17
      00049B C0 E0            [24] 1312 	push	acc
      00049D 74s02            [12] 1313 	mov	a,#(___str_17 >> 8)
      00049F C0 E0            [24] 1314 	push	acc
      0004A1 12r00r00         [24] 1315 	lcall	_printf_tiny
      0004A4 15 81            [12] 1316 	dec	sp
      0004A6 15 81            [12] 1317 	dec	sp
      0004A8 D0 00            [24] 1318 	pop	ar0
      0004AA D0 01            [24] 1319 	pop	ar1
      0004AC D0 04            [24] 1320 	pop	ar4
      0004AE D0 05            [24] 1321 	pop	ar5
      0004B0 D0 06            [24] 1322 	pop	ar6
      0004B2 D0 07            [24] 1323 	pop	ar7
                                   1324 ;	main.c:136: buffer_1=0;
      0004B4 90r00r00         [24] 1325 	mov	dptr,#_main_buffer_1_65536_47
      0004B7 E4               [12] 1326 	clr	a
      0004B8 F0               [24] 1327 	movx	@dptr,a
      0004B9 A3               [24] 1328 	inc	dptr
      0004BA F0               [24] 1329 	movx	@dptr,a
      0004BB D0 01            [24] 1330 	pop	ar1
      0004BD D0 00            [24] 1331 	pop	ar0
      0004BF 02r01r57         [24] 1332 	ljmp	00167$
      0004C2                       1333 00125$:
                                   1334 ;	main.c:139: else if(buff_del==0)
      0004C2 E5*07            [12] 1335 	mov	a,_main_sloc4_1_0
      0004C4 45*08            [12] 1336 	orl	a,(_main_sloc4_1_0 + 1)
      0004C6 70 30            [24] 1337 	jnz	00122$
                                   1338 ;	main.c:141: printf("\n\r Cannot delete buffer 0\n\r");
      0004C8 C0 07            [24] 1339 	push	ar7
      0004CA C0 06            [24] 1340 	push	ar6
      0004CC C0 05            [24] 1341 	push	ar5
      0004CE C0 04            [24] 1342 	push	ar4
      0004D0 C0 01            [24] 1343 	push	ar1
      0004D2 C0 00            [24] 1344 	push	ar0
      0004D4 74rDF            [12] 1345 	mov	a,#___str_18
      0004D6 C0 E0            [24] 1346 	push	acc
      0004D8 74s02            [12] 1347 	mov	a,#(___str_18 >> 8)
      0004DA C0 E0            [24] 1348 	push	acc
      0004DC 74 80            [12] 1349 	mov	a,#0x80
      0004DE C0 E0            [24] 1350 	push	acc
      0004E0 12r00r00         [24] 1351 	lcall	_printf
      0004E3 15 81            [12] 1352 	dec	sp
      0004E5 15 81            [12] 1353 	dec	sp
      0004E7 15 81            [12] 1354 	dec	sp
      0004E9 D0 00            [24] 1355 	pop	ar0
      0004EB D0 01            [24] 1356 	pop	ar1
      0004ED D0 04            [24] 1357 	pop	ar4
      0004EF D0 05            [24] 1358 	pop	ar5
      0004F1 D0 06            [24] 1359 	pop	ar6
      0004F3 D0 07            [24] 1360 	pop	ar7
      0004F5 02r01r57         [24] 1361 	ljmp	00167$
      0004F8                       1362 00122$:
                                   1363 ;	main.c:143: else if(buff_del >1 && buff_del <(extra_buffers+2))
      0004F8 C3               [12] 1364 	clr	c
      0004F9 74 01            [12] 1365 	mov	a,#0x01
      0004FB 95*07            [12] 1366 	subb	a,_main_sloc4_1_0
      0004FD 74 80            [12] 1367 	mov	a,#(0x00 ^ 0x80)
      0004FF 85*08 F0         [24] 1368 	mov	b,(_main_sloc4_1_0 + 1)
      000502 63 F0 80         [24] 1369 	xrl	b,#0x80
      000505 95 F0            [12] 1370 	subb	a,b
      000507 40 03            [24] 1371 	jc	00361$
      000509 02r05rB8         [24] 1372 	ljmp	00118$
      00050C                       1373 00361$:
      00050C 74 02            [12] 1374 	mov	a,#0x02
      00050E 25*04            [12] 1375 	add	a,_main_sloc2_1_0
      000510 FA               [12] 1376 	mov	r2,a
      000511 E4               [12] 1377 	clr	a
      000512 35*05            [12] 1378 	addc	a,(_main_sloc2_1_0 + 1)
      000514 FB               [12] 1379 	mov	r3,a
      000515 C3               [12] 1380 	clr	c
      000516 E5*07            [12] 1381 	mov	a,_main_sloc4_1_0
      000518 9A               [12] 1382 	subb	a,r2
      000519 E5*08            [12] 1383 	mov	a,(_main_sloc4_1_0 + 1)
      00051B 64 80            [12] 1384 	xrl	a,#0x80
      00051D 8B F0            [24] 1385 	mov	b,r3
      00051F 63 F0 80         [24] 1386 	xrl	b,#0x80
      000522 95 F0            [12] 1387 	subb	a,b
      000524 40 03            [24] 1388 	jc	00362$
      000526 02r05rB8         [24] 1389 	ljmp	00118$
      000529                       1390 00362$:
                                   1391 ;	main.c:145: free(buffer_n[buff_del-2]);
      000529 C0 00            [24] 1392 	push	ar0
      00052B C0 01            [24] 1393 	push	ar1
      00052D AB*07            [24] 1394 	mov	r3,_main_sloc4_1_0
      00052F 1B               [12] 1395 	dec	r3
      000530 1B               [12] 1396 	dec	r3
      000531 C2 D5            [12] 1397 	clr	F0
      000533 75 F0 02         [24] 1398 	mov	b,#0x02
      000536 EB               [12] 1399 	mov	a,r3
      000537 30 E7 04         [24] 1400 	jnb	acc.7,00363$
      00053A B2 D5            [12] 1401 	cpl	F0
      00053C F4               [12] 1402 	cpl	a
      00053D 04               [12] 1403 	inc	a
      00053E                       1404 00363$:
      00053E A4               [48] 1405 	mul	ab
      00053F 30 D5 0A         [24] 1406 	jnb	F0,00364$
      000542 F4               [12] 1407 	cpl	a
      000543 24 01            [12] 1408 	add	a,#0x01
      000545 C5 F0            [12] 1409 	xch	a,b
      000547 F4               [12] 1410 	cpl	a
      000548 34 00            [12] 1411 	addc	a,#0x00
      00054A C5 F0            [12] 1412 	xch	a,b
      00054C                       1413 00364$:
      00054C 24r02            [12] 1414 	add	a,#_main_buffer_n_65536_47
      00054E F5*0D            [12] 1415 	mov	_main_sloc7_1_0,a
      000550 74s00            [12] 1416 	mov	a,#(_main_buffer_n_65536_47 >> 8)
      000552 35 F0            [12] 1417 	addc	a,b
      000554 F5*0E            [12] 1418 	mov	(_main_sloc7_1_0 + 1),a
      000556 85*0D 82         [24] 1419 	mov	dpl,_main_sloc7_1_0
      000559 85*0E 83         [24] 1420 	mov	dph,(_main_sloc7_1_0 + 1)
      00055C E0               [24] 1421 	movx	a,@dptr
      00055D F8               [12] 1422 	mov	r0,a
      00055E A3               [24] 1423 	inc	dptr
      00055F E0               [24] 1424 	movx	a,@dptr
      000560 F9               [12] 1425 	mov	r1,a
      000561 7B 00            [12] 1426 	mov	r3,#0x00
      000563 88 82            [24] 1427 	mov	dpl,r0
      000565 89 83            [24] 1428 	mov	dph,r1
      000567 8B F0            [24] 1429 	mov	b,r3
      000569 C0 07            [24] 1430 	push	ar7
      00056B C0 06            [24] 1431 	push	ar6
      00056D C0 05            [24] 1432 	push	ar5
      00056F C0 04            [24] 1433 	push	ar4
      000571 C0 01            [24] 1434 	push	ar1
      000573 C0 00            [24] 1435 	push	ar0
      000575 12r00r00         [24] 1436 	lcall	_free
                                   1437 ;	main.c:146: printf("\n\rFreed buffer_%d\n\r",buff_del-2);
      000578 E5*07            [12] 1438 	mov	a,_main_sloc4_1_0
      00057A 24 FE            [12] 1439 	add	a,#0xfe
      00057C FA               [12] 1440 	mov	r2,a
      00057D E5*08            [12] 1441 	mov	a,(_main_sloc4_1_0 + 1)
      00057F 34 FF            [12] 1442 	addc	a,#0xff
      000581 FB               [12] 1443 	mov	r3,a
      000582 C0 02            [24] 1444 	push	ar2
      000584 C0 03            [24] 1445 	push	ar3
      000586 74rFB            [12] 1446 	mov	a,#___str_19
      000588 C0 E0            [24] 1447 	push	acc
      00058A 74s02            [12] 1448 	mov	a,#(___str_19 >> 8)
      00058C C0 E0            [24] 1449 	push	acc
      00058E 74 80            [12] 1450 	mov	a,#0x80
      000590 C0 E0            [24] 1451 	push	acc
      000592 12r00r00         [24] 1452 	lcall	_printf
      000595 E5 81            [12] 1453 	mov	a,sp
      000597 24 FB            [12] 1454 	add	a,#0xfb
      000599 F5 81            [12] 1455 	mov	sp,a
      00059B D0 00            [24] 1456 	pop	ar0
      00059D D0 01            [24] 1457 	pop	ar1
      00059F D0 04            [24] 1458 	pop	ar4
      0005A1 D0 05            [24] 1459 	pop	ar5
      0005A3 D0 06            [24] 1460 	pop	ar6
      0005A5 D0 07            [24] 1461 	pop	ar7
                                   1462 ;	main.c:147: buffer_n[buff_del-2]=0;
      0005A7 85*0D 82         [24] 1463 	mov	dpl,_main_sloc7_1_0
      0005AA 85*0E 83         [24] 1464 	mov	dph,(_main_sloc7_1_0 + 1)
      0005AD E4               [12] 1465 	clr	a
      0005AE F0               [24] 1466 	movx	@dptr,a
      0005AF A3               [24] 1467 	inc	dptr
      0005B0 F0               [24] 1468 	movx	@dptr,a
      0005B1 D0 01            [24] 1469 	pop	ar1
      0005B3 D0 00            [24] 1470 	pop	ar0
      0005B5 02r01r57         [24] 1471 	ljmp	00167$
      0005B8                       1472 00118$:
                                   1473 ;	main.c:151: printf("\n\r enter a valid buffer number\n\r");
      0005B8 C0 07            [24] 1474 	push	ar7
      0005BA C0 06            [24] 1475 	push	ar6
      0005BC C0 05            [24] 1476 	push	ar5
      0005BE C0 04            [24] 1477 	push	ar4
      0005C0 C0 01            [24] 1478 	push	ar1
      0005C2 C0 00            [24] 1479 	push	ar0
      0005C4 74r0F            [12] 1480 	mov	a,#___str_20
      0005C6 C0 E0            [24] 1481 	push	acc
      0005C8 74s03            [12] 1482 	mov	a,#(___str_20 >> 8)
      0005CA C0 E0            [24] 1483 	push	acc
      0005CC 74 80            [12] 1484 	mov	a,#0x80
      0005CE C0 E0            [24] 1485 	push	acc
      0005D0 12r00r00         [24] 1486 	lcall	_printf
      0005D3 15 81            [12] 1487 	dec	sp
      0005D5 15 81            [12] 1488 	dec	sp
      0005D7 15 81            [12] 1489 	dec	sp
      0005D9 D0 00            [24] 1490 	pop	ar0
      0005DB D0 01            [24] 1491 	pop	ar1
      0005DD D0 04            [24] 1492 	pop	ar4
      0005DF D0 05            [24] 1493 	pop	ar5
      0005E1 D0 06            [24] 1494 	pop	ar6
      0005E3 D0 07            [24] 1495 	pop	ar7
      0005E5 02r01r57         [24] 1496 	ljmp	00167$
      0005E8                       1497 00148$:
                                   1498 ;	main.c:155: else if(in_char=='=')
      0005E8 74 3D            [12] 1499 	mov	a,#0x3d
      0005EA B5*06 02         [24] 1500 	cjne	a,_main_sloc3_1_0,00365$
      0005ED 80 03            [24] 1501 	sjmp	00366$
      0005EF                       1502 00365$:
      0005EF 02r06rA0         [24] 1503 	ljmp	00145$
      0005F2                       1504 00366$:
                                   1505 ;	main.c:157: printf_tiny("\n\r contents of buffer 0 \n\r");
      0005F2 C0 07            [24] 1506 	push	ar7
      0005F4 C0 06            [24] 1507 	push	ar6
      0005F6 C0 05            [24] 1508 	push	ar5
      0005F8 C0 04            [24] 1509 	push	ar4
      0005FA C0 01            [24] 1510 	push	ar1
      0005FC C0 00            [24] 1511 	push	ar0
      0005FE 74r30            [12] 1512 	mov	a,#___str_21
      000600 C0 E0            [24] 1513 	push	acc
      000602 74s03            [12] 1514 	mov	a,#(___str_21 >> 8)
      000604 C0 E0            [24] 1515 	push	acc
      000606 12r00r00         [24] 1516 	lcall	_printf_tiny
      000609 15 81            [12] 1517 	dec	sp
      00060B 15 81            [12] 1518 	dec	sp
                                   1519 ;	main.c:158: printf("\n\r storage character -- its hexadecimal representation\n\r");
      00060D 74r4B            [12] 1520 	mov	a,#___str_22
      00060F C0 E0            [24] 1521 	push	acc
      000611 74s03            [12] 1522 	mov	a,#(___str_22 >> 8)
      000613 C0 E0            [24] 1523 	push	acc
      000615 74 80            [12] 1524 	mov	a,#0x80
      000617 C0 E0            [24] 1525 	push	acc
      000619 12r00r00         [24] 1526 	lcall	_printf
      00061C 15 81            [12] 1527 	dec	sp
      00061E 15 81            [12] 1528 	dec	sp
      000620 15 81            [12] 1529 	dec	sp
      000622 D0 00            [24] 1530 	pop	ar0
      000624 D0 01            [24] 1531 	pop	ar1
      000626 D0 04            [24] 1532 	pop	ar4
      000628 D0 05            [24] 1533 	pop	ar5
      00062A D0 06            [24] 1534 	pop	ar6
      00062C D0 07            [24] 1535 	pop	ar7
                                   1536 ;	main.c:160: for(buff_0_pt=0;(buff_0_pt)<buff0_stored;(buff_0_pt)++)
      00062E 90r00r40         [24] 1537 	mov	dptr,#_main_buff0_stored_65536_47
      000631 E0               [24] 1538 	movx	a,@dptr
      000632 FA               [12] 1539 	mov	r2,a
      000633 A3               [24] 1540 	inc	dptr
      000634 E0               [24] 1541 	movx	a,@dptr
      000635 FB               [12] 1542 	mov	r3,a
      000636 E4               [12] 1543 	clr	a
      000637 F5*0D            [12] 1544 	mov	_main_sloc7_1_0,a
      000639 F5*0E            [12] 1545 	mov	(_main_sloc7_1_0 + 1),a
      00063B                       1546 00170$:
      00063B C3               [12] 1547 	clr	c
      00063C E5*0D            [12] 1548 	mov	a,_main_sloc7_1_0
      00063E 9A               [12] 1549 	subb	a,r2
      00063F E5*0E            [12] 1550 	mov	a,(_main_sloc7_1_0 + 1)
      000641 9B               [12] 1551 	subb	a,r3
      000642 40 03            [24] 1552 	jc	00367$
      000644 02r01r57         [24] 1553 	ljmp	00167$
      000647                       1554 00367$:
                                   1555 ;	main.c:164: printf_tiny("%c--%x\n\r",*((buffer_0)+(buff_0_pt)),*((buffer_0)+(buff_0_pt)));
      000647 C0 00            [24] 1556 	push	ar0
      000649 C0 01            [24] 1557 	push	ar1
      00064B E5*0D            [12] 1558 	mov	a,_main_sloc7_1_0
      00064D 2C               [12] 1559 	add	a,r4
      00064E F5 82            [12] 1560 	mov	dpl,a
      000650 E5*0E            [12] 1561 	mov	a,(_main_sloc7_1_0 + 1)
      000652 3D               [12] 1562 	addc	a,r5
      000653 F5 83            [12] 1563 	mov	dph,a
      000655 E0               [24] 1564 	movx	a,@dptr
      000656 F8               [12] 1565 	mov	r0,a
      000657 79 00            [12] 1566 	mov	r1,#0x00
      000659 C0 07            [24] 1567 	push	ar7
      00065B C0 06            [24] 1568 	push	ar6
      00065D C0 05            [24] 1569 	push	ar5
      00065F C0 04            [24] 1570 	push	ar4
      000661 C0 03            [24] 1571 	push	ar3
      000663 C0 02            [24] 1572 	push	ar2
      000665 C0 01            [24] 1573 	push	ar1
      000667 C0 00            [24] 1574 	push	ar0
      000669 C0 00            [24] 1575 	push	ar0
      00066B C0 01            [24] 1576 	push	ar1
      00066D C0 00            [24] 1577 	push	ar0
      00066F C0 01            [24] 1578 	push	ar1
      000671 74r84            [12] 1579 	mov	a,#___str_23
      000673 C0 E0            [24] 1580 	push	acc
      000675 74s03            [12] 1581 	mov	a,#(___str_23 >> 8)
      000677 C0 E0            [24] 1582 	push	acc
      000679 12r00r00         [24] 1583 	lcall	_printf_tiny
      00067C E5 81            [12] 1584 	mov	a,sp
      00067E 24 FA            [12] 1585 	add	a,#0xfa
      000680 F5 81            [12] 1586 	mov	sp,a
      000682 D0 00            [24] 1587 	pop	ar0
      000684 D0 01            [24] 1588 	pop	ar1
      000686 D0 02            [24] 1589 	pop	ar2
      000688 D0 03            [24] 1590 	pop	ar3
      00068A D0 04            [24] 1591 	pop	ar4
      00068C D0 05            [24] 1592 	pop	ar5
      00068E D0 06            [24] 1593 	pop	ar6
      000690 D0 07            [24] 1594 	pop	ar7
                                   1595 ;	main.c:160: for(buff_0_pt=0;(buff_0_pt)<buff0_stored;(buff_0_pt)++)
      000692 05*0D            [12] 1596 	inc	_main_sloc7_1_0
      000694 E4               [12] 1597 	clr	a
      000695 B5*0D 02         [24] 1598 	cjne	a,_main_sloc7_1_0,00368$
      000698 05*0E            [12] 1599 	inc	(_main_sloc7_1_0 + 1)
      00069A                       1600 00368$:
      00069A D0 01            [24] 1601 	pop	ar1
      00069C D0 00            [24] 1602 	pop	ar0
      00069E 80 9B            [24] 1603 	sjmp	00170$
      0006A0                       1604 00145$:
                                   1605 ;	main.c:169: else if(in_char=='@')
      0006A0 74 40            [12] 1606 	mov	a,#0x40
      0006A2 B5*06 02         [24] 1607 	cjne	a,_main_sloc3_1_0,00369$
      0006A5 80 03            [24] 1608 	sjmp	00370$
      0006A7                       1609 00369$:
      0006A7 02r07rC7         [24] 1610 	ljmp	00142$
      0006AA                       1611 00370$:
                                   1612 ;	main.c:171: free(buffer_0);
      0006AA C0 00            [24] 1613 	push	ar0
      0006AC C0 01            [24] 1614 	push	ar1
      0006AE 8C 02            [24] 1615 	mov	ar2,r4
      0006B0 8D 03            [24] 1616 	mov	ar3,r5
      0006B2 8B 01            [24] 1617 	mov	ar1,r3
      0006B4 7B 00            [12] 1618 	mov	r3,#0x00
      0006B6 8A 82            [24] 1619 	mov	dpl,r2
      0006B8 89 83            [24] 1620 	mov	dph,r1
      0006BA 8B F0            [24] 1621 	mov	b,r3
      0006BC C0 07            [24] 1622 	push	ar7
      0006BE C0 06            [24] 1623 	push	ar6
      0006C0 C0 05            [24] 1624 	push	ar5
      0006C2 C0 04            [24] 1625 	push	ar4
      0006C4 C0 01            [24] 1626 	push	ar1
      0006C6 C0 00            [24] 1627 	push	ar0
      0006C8 12r00r00         [24] 1628 	lcall	_free
                                   1629 ;	main.c:172: printf_tiny("\n\r buffer 0 is freed\n\r");
      0006CB 74r8D            [12] 1630 	mov	a,#___str_24
      0006CD C0 E0            [24] 1631 	push	acc
      0006CF 74s03            [12] 1632 	mov	a,#(___str_24 >> 8)
      0006D1 C0 E0            [24] 1633 	push	acc
      0006D3 12r00r00         [24] 1634 	lcall	_printf_tiny
      0006D6 15 81            [12] 1635 	dec	sp
      0006D8 15 81            [12] 1636 	dec	sp
      0006DA D0 00            [24] 1637 	pop	ar0
      0006DC D0 01            [24] 1638 	pop	ar1
                                   1639 ;	main.c:173: free(buffer_1);
      0006DE 90r00r00         [24] 1640 	mov	dptr,#_main_buffer_1_65536_47
      0006E1 E0               [24] 1641 	movx	a,@dptr
      0006E2 FA               [12] 1642 	mov	r2,a
      0006E3 A3               [24] 1643 	inc	dptr
      0006E4 E0               [24] 1644 	movx	a,@dptr
      0006E5 F9               [12] 1645 	mov	r1,a
      0006E6 7B 00            [12] 1646 	mov	r3,#0x00
      0006E8 8A 82            [24] 1647 	mov	dpl,r2
      0006EA 89 83            [24] 1648 	mov	dph,r1
      0006EC 8B F0            [24] 1649 	mov	b,r3
      0006EE C0 01            [24] 1650 	push	ar1
      0006F0 C0 00            [24] 1651 	push	ar0
      0006F2 12r00r00         [24] 1652 	lcall	_free
                                   1653 ;	main.c:174: printf_tiny("\n\r buffer 1 is freed\n\r");
      0006F5 74rA4            [12] 1654 	mov	a,#___str_25
      0006F7 C0 E0            [24] 1655 	push	acc
      0006F9 74s03            [12] 1656 	mov	a,#(___str_25 >> 8)
      0006FB C0 E0            [24] 1657 	push	acc
      0006FD 12r00r00         [24] 1658 	lcall	_printf_tiny
      000700 15 81            [12] 1659 	dec	sp
      000702 15 81            [12] 1660 	dec	sp
      000704 D0 00            [24] 1661 	pop	ar0
      000706 D0 01            [24] 1662 	pop	ar1
      000708 D0 04            [24] 1663 	pop	ar4
      00070A D0 05            [24] 1664 	pop	ar5
      00070C D0 06            [24] 1665 	pop	ar6
      00070E D0 07            [24] 1666 	pop	ar7
                                   1667 ;	main.c:175: for(i=2;i<(extra_buffers+2);i++)
      000710 85*04*0D         [24] 1668 	mov	_main_sloc7_1_0,_main_sloc2_1_0
      000713 85*05*0E         [24] 1669 	mov	(_main_sloc7_1_0 + 1),(_main_sloc2_1_0 + 1)
      000716 74 02            [12] 1670 	mov	a,#0x02
      000718 25*04            [12] 1671 	add	a,_main_sloc2_1_0
      00071A F5*07            [12] 1672 	mov	_main_sloc4_1_0,a
      00071C E4               [12] 1673 	clr	a
      00071D 35*05            [12] 1674 	addc	a,(_main_sloc2_1_0 + 1)
      00071F F5*08            [12] 1675 	mov	(_main_sloc4_1_0 + 1),a
      000721 75*0F 02         [24] 1676 	mov	_main_sloc8_1_0,#0x02
      000724 75*10 00         [24] 1677 	mov	(_main_sloc8_1_0 + 1),#0x00
                                   1678 ;	main.c:243: printf_tiny("\n\r invalid character input.try again\n\r");
      000727 D0 01            [24] 1679 	pop	ar1
      000729 D0 00            [24] 1680 	pop	ar0
                                   1681 ;	main.c:175: for(i=2;i<(extra_buffers+2);i++)
      00072B                       1682 00173$:
      00072B AA*07            [24] 1683 	mov	r2,_main_sloc4_1_0
      00072D AB*08            [24] 1684 	mov	r3,(_main_sloc4_1_0 + 1)
      00072F C3               [12] 1685 	clr	c
      000730 E5*0F            [12] 1686 	mov	a,_main_sloc8_1_0
      000732 9A               [12] 1687 	subb	a,r2
      000733 E5*10            [12] 1688 	mov	a,(_main_sloc8_1_0 + 1)
      000735 9B               [12] 1689 	subb	a,r3
      000736 50 62            [24] 1690 	jnc	00128$
                                   1691 ;	main.c:177: free(buffer_n[extra_buffers]);
      000738 C0 00            [24] 1692 	push	ar0
      00073A C0 01            [24] 1693 	push	ar1
      00073C E5*0D            [12] 1694 	mov	a,_main_sloc7_1_0
      00073E 25*0D            [12] 1695 	add	a,_main_sloc7_1_0
      000740 FA               [12] 1696 	mov	r2,a
      000741 E5*0E            [12] 1697 	mov	a,(_main_sloc7_1_0 + 1)
      000743 33               [12] 1698 	rlc	a
      000744 FB               [12] 1699 	mov	r3,a
      000745 EA               [12] 1700 	mov	a,r2
      000746 24r02            [12] 1701 	add	a,#_main_buffer_n_65536_47
      000748 F5 82            [12] 1702 	mov	dpl,a
      00074A EB               [12] 1703 	mov	a,r3
      00074B 34s00            [12] 1704 	addc	a,#(_main_buffer_n_65536_47 >> 8)
      00074D F5 83            [12] 1705 	mov	dph,a
      00074F E0               [24] 1706 	movx	a,@dptr
      000750 FA               [12] 1707 	mov	r2,a
      000751 A3               [24] 1708 	inc	dptr
      000752 E0               [24] 1709 	movx	a,@dptr
      000753 F9               [12] 1710 	mov	r1,a
      000754 7B 00            [12] 1711 	mov	r3,#0x00
      000756 8A 82            [24] 1712 	mov	dpl,r2
      000758 89 83            [24] 1713 	mov	dph,r1
      00075A 8B F0            [24] 1714 	mov	b,r3
      00075C C0 07            [24] 1715 	push	ar7
      00075E C0 06            [24] 1716 	push	ar6
      000760 C0 05            [24] 1717 	push	ar5
      000762 C0 04            [24] 1718 	push	ar4
      000764 C0 01            [24] 1719 	push	ar1
      000766 C0 00            [24] 1720 	push	ar0
      000768 12r00r00         [24] 1721 	lcall	_free
                                   1722 ;	main.c:178: printf_tiny("\n\r buffer %d is freed\n\r",extra_buffers);
      00076B C0*0D            [24] 1723 	push	_main_sloc7_1_0
      00076D C0*0E            [24] 1724 	push	(_main_sloc7_1_0 + 1)
      00076F 74rBB            [12] 1725 	mov	a,#___str_26
      000771 C0 E0            [24] 1726 	push	acc
      000773 74s03            [12] 1727 	mov	a,#(___str_26 >> 8)
      000775 C0 E0            [24] 1728 	push	acc
      000777 12r00r00         [24] 1729 	lcall	_printf_tiny
      00077A E5 81            [12] 1730 	mov	a,sp
      00077C 24 FC            [12] 1731 	add	a,#0xfc
      00077E F5 81            [12] 1732 	mov	sp,a
      000780 D0 00            [24] 1733 	pop	ar0
      000782 D0 01            [24] 1734 	pop	ar1
      000784 D0 04            [24] 1735 	pop	ar4
      000786 D0 05            [24] 1736 	pop	ar5
      000788 D0 06            [24] 1737 	pop	ar6
      00078A D0 07            [24] 1738 	pop	ar7
                                   1739 ;	main.c:175: for(i=2;i<(extra_buffers+2);i++)
      00078C 05*0F            [12] 1740 	inc	_main_sloc8_1_0
      00078E E4               [12] 1741 	clr	a
      00078F B5*0F 02         [24] 1742 	cjne	a,_main_sloc8_1_0,00372$
      000792 05*10            [12] 1743 	inc	(_main_sloc8_1_0 + 1)
      000794                       1744 00372$:
      000794 D0 01            [24] 1745 	pop	ar1
      000796 D0 00            [24] 1746 	pop	ar0
      000798 80 91            [24] 1747 	sjmp	00173$
      00079A                       1748 00128$:
                                   1749 ;	main.c:180: printf_tiny("\n\r all buffers are freed. Please start from the beginning\n\r");
      00079A C0 07            [24] 1750 	push	ar7
      00079C C0 06            [24] 1751 	push	ar6
      00079E C0 05            [24] 1752 	push	ar5
      0007A0 C0 04            [24] 1753 	push	ar4
      0007A2 C0 01            [24] 1754 	push	ar1
      0007A4 C0 00            [24] 1755 	push	ar0
      0007A6 74rD3            [12] 1756 	mov	a,#___str_27
      0007A8 C0 E0            [24] 1757 	push	acc
      0007AA 74s03            [12] 1758 	mov	a,#(___str_27 >> 8)
      0007AC C0 E0            [24] 1759 	push	acc
      0007AE 12r00r00         [24] 1760 	lcall	_printf_tiny
      0007B1 15 81            [12] 1761 	dec	sp
      0007B3 15 81            [12] 1762 	dec	sp
                                   1763 ;	main.c:181: main();
      0007B5 12r00r07         [24] 1764 	lcall	_main
      0007B8 D0 00            [24] 1765 	pop	ar0
      0007BA D0 01            [24] 1766 	pop	ar1
      0007BC D0 04            [24] 1767 	pop	ar4
      0007BE D0 05            [24] 1768 	pop	ar5
      0007C0 D0 06            [24] 1769 	pop	ar6
      0007C2 D0 07            [24] 1770 	pop	ar7
      0007C4 02r01r57         [24] 1771 	ljmp	00167$
      0007C7                       1772 00142$:
                                   1773 ;	main.c:184: else if(in_char=='?')
      0007C7 74 3F            [12] 1774 	mov	a,#0x3f
      0007C9 B5*06 02         [24] 1775 	cjne	a,_main_sloc3_1_0,00373$
      0007CC 80 03            [24] 1776 	sjmp	00374$
      0007CE                       1777 00373$:
      0007CE 02r0CrA4         [24] 1778 	ljmp	00139$
      0007D1                       1779 00374$:
                                   1780 ;	main.c:187: printf_tiny("\n\r HEAP REPORT \n\r");
      0007D1 C0 07            [24] 1781 	push	ar7
      0007D3 C0 06            [24] 1782 	push	ar6
      0007D5 C0 05            [24] 1783 	push	ar5
      0007D7 C0 04            [24] 1784 	push	ar4
      0007D9 C0 01            [24] 1785 	push	ar1
      0007DB C0 00            [24] 1786 	push	ar0
      0007DD 74r0F            [12] 1787 	mov	a,#___str_28
      0007DF C0 E0            [24] 1788 	push	acc
      0007E1 74s04            [12] 1789 	mov	a,#(___str_28 >> 8)
      0007E3 C0 E0            [24] 1790 	push	acc
      0007E5 12r00r00         [24] 1791 	lcall	_printf_tiny
      0007E8 15 81            [12] 1792 	dec	sp
      0007EA 15 81            [12] 1793 	dec	sp
      0007EC D0 00            [24] 1794 	pop	ar0
      0007EE D0 01            [24] 1795 	pop	ar1
                                   1796 ;	main.c:189: printf_tiny("\n\r Buffer 0 starts at = 0x%x \n\r",buff0_start);
      0007F0 C0 01            [24] 1797 	push	ar1
      0007F2 C0 00            [24] 1798 	push	ar0
      0007F4 C0 00            [24] 1799 	push	ar0
      0007F6 C0 01            [24] 1800 	push	ar1
      0007F8 74r21            [12] 1801 	mov	a,#___str_29
      0007FA C0 E0            [24] 1802 	push	acc
      0007FC 74s04            [12] 1803 	mov	a,#(___str_29 >> 8)
      0007FE C0 E0            [24] 1804 	push	acc
      000800 12r00r00         [24] 1805 	lcall	_printf_tiny
      000803 E5 81            [12] 1806 	mov	a,sp
      000805 24 FC            [12] 1807 	add	a,#0xfc
      000807 F5 81            [12] 1808 	mov	sp,a
      000809 D0 00            [24] 1809 	pop	ar0
      00080B D0 01            [24] 1810 	pop	ar1
                                   1811 ;	main.c:190: printf_tiny("\n\r Buffer 0 ends at =x%x\n\r",buff0_start+buffer0_size);
      00080D 88 02            [24] 1812 	mov	ar2,r0
      00080F 89 03            [24] 1813 	mov	ar3,r1
      000811 E5*09            [12] 1814 	mov	a,_main_sloc5_1_0
      000813 2A               [12] 1815 	add	a,r2
      000814 FA               [12] 1816 	mov	r2,a
      000815 E5*0A            [12] 1817 	mov	a,(_main_sloc5_1_0 + 1)
      000817 3B               [12] 1818 	addc	a,r3
      000818 FB               [12] 1819 	mov	r3,a
      000819 C0 01            [24] 1820 	push	ar1
      00081B C0 00            [24] 1821 	push	ar0
      00081D C0 02            [24] 1822 	push	ar2
      00081F C0 03            [24] 1823 	push	ar3
      000821 74r41            [12] 1824 	mov	a,#___str_30
      000823 C0 E0            [24] 1825 	push	acc
      000825 74s04            [12] 1826 	mov	a,#(___str_30 >> 8)
      000827 C0 E0            [24] 1827 	push	acc
      000829 12r00r00         [24] 1828 	lcall	_printf_tiny
      00082C E5 81            [12] 1829 	mov	a,sp
      00082E 24 FC            [12] 1830 	add	a,#0xfc
      000830 F5 81            [12] 1831 	mov	sp,a
      000832 D0 00            [24] 1832 	pop	ar0
      000834 D0 01            [24] 1833 	pop	ar1
      000836 D0 04            [24] 1834 	pop	ar4
      000838 D0 05            [24] 1835 	pop	ar5
      00083A D0 06            [24] 1836 	pop	ar6
      00083C D0 07            [24] 1837 	pop	ar7
                                   1838 ;	main.c:191: printf_tiny("\n\r Buffer 0 size =%d\n\r",buffer0_size);
      00083E C0 07            [24] 1839 	push	ar7
      000840 C0 06            [24] 1840 	push	ar6
      000842 C0 05            [24] 1841 	push	ar5
      000844 C0 04            [24] 1842 	push	ar4
      000846 C0 01            [24] 1843 	push	ar1
      000848 C0 00            [24] 1844 	push	ar0
      00084A C0 06            [24] 1845 	push	ar6
      00084C C0 07            [24] 1846 	push	ar7
      00084E 74r5C            [12] 1847 	mov	a,#___str_31
      000850 C0 E0            [24] 1848 	push	acc
      000852 74s04            [12] 1849 	mov	a,#(___str_31 >> 8)
      000854 C0 E0            [24] 1850 	push	acc
      000856 12r00r00         [24] 1851 	lcall	_printf_tiny
      000859 E5 81            [12] 1852 	mov	a,sp
      00085B 24 FC            [12] 1853 	add	a,#0xfc
      00085D F5 81            [12] 1854 	mov	sp,a
      00085F D0 00            [24] 1855 	pop	ar0
      000861 D0 01            [24] 1856 	pop	ar1
                                   1857 ;	main.c:192: printf_tiny("\n\r number of storage characters in buffer 0=%d\n\r",buff0_stored);
      000863 90r00r40         [24] 1858 	mov	dptr,#_main_buff0_stored_65536_47
      000866 E0               [24] 1859 	movx	a,@dptr
      000867 FA               [12] 1860 	mov	r2,a
      000868 A3               [24] 1861 	inc	dptr
      000869 E0               [24] 1862 	movx	a,@dptr
      00086A FB               [12] 1863 	mov	r3,a
      00086B C0 03            [24] 1864 	push	ar3
      00086D C0 02            [24] 1865 	push	ar2
      00086F C0 01            [24] 1866 	push	ar1
      000871 C0 00            [24] 1867 	push	ar0
      000873 C0 02            [24] 1868 	push	ar2
      000875 C0 03            [24] 1869 	push	ar3
      000877 74r73            [12] 1870 	mov	a,#___str_32
      000879 C0 E0            [24] 1871 	push	acc
      00087B 74s04            [12] 1872 	mov	a,#(___str_32 >> 8)
      00087D C0 E0            [24] 1873 	push	acc
      00087F 12r00r00         [24] 1874 	lcall	_printf_tiny
      000882 E5 81            [12] 1875 	mov	a,sp
      000884 24 FC            [12] 1876 	add	a,#0xfc
      000886 F5 81            [12] 1877 	mov	sp,a
      000888 D0 00            [24] 1878 	pop	ar0
      00088A D0 01            [24] 1879 	pop	ar1
      00088C D0 02            [24] 1880 	pop	ar2
      00088E D0 03            [24] 1881 	pop	ar3
                                   1882 ;	main.c:193: printf_tiny("\n\r number of free spaces in buffer 0=%d\n\r",buffer0_size-buff0_stored);
      000890 E5*09            [12] 1883 	mov	a,_main_sloc5_1_0
      000892 C3               [12] 1884 	clr	c
      000893 9A               [12] 1885 	subb	a,r2
      000894 FA               [12] 1886 	mov	r2,a
      000895 E5*0A            [12] 1887 	mov	a,(_main_sloc5_1_0 + 1)
      000897 9B               [12] 1888 	subb	a,r3
      000898 FB               [12] 1889 	mov	r3,a
      000899 C0 01            [24] 1890 	push	ar1
      00089B C0 00            [24] 1891 	push	ar0
      00089D C0 02            [24] 1892 	push	ar2
      00089F C0 03            [24] 1893 	push	ar3
      0008A1 74rA4            [12] 1894 	mov	a,#___str_33
      0008A3 C0 E0            [24] 1895 	push	acc
      0008A5 74s04            [12] 1896 	mov	a,#(___str_33 >> 8)
      0008A7 C0 E0            [24] 1897 	push	acc
      0008A9 12r00r00         [24] 1898 	lcall	_printf_tiny
      0008AC E5 81            [12] 1899 	mov	a,sp
      0008AE 24 FC            [12] 1900 	add	a,#0xfc
      0008B0 F5 81            [12] 1901 	mov	sp,a
      0008B2 D0 00            [24] 1902 	pop	ar0
      0008B4 D0 01            [24] 1903 	pop	ar1
      0008B6 D0 04            [24] 1904 	pop	ar4
      0008B8 D0 05            [24] 1905 	pop	ar5
      0008BA D0 06            [24] 1906 	pop	ar6
      0008BC D0 07            [24] 1907 	pop	ar7
                                   1908 ;	main.c:196: if(buffer_1!=0)
      0008BE 90r00r00         [24] 1909 	mov	dptr,#_main_buffer_1_65536_47
      0008C1 E0               [24] 1910 	movx	a,@dptr
      0008C2 F5 F0            [12] 1911 	mov	b,a
      0008C4 A3               [24] 1912 	inc	dptr
      0008C5 E0               [24] 1913 	movx	a,@dptr
      0008C6 45 F0            [12] 1914 	orl	a,b
      0008C8 70 03            [24] 1915 	jnz	00375$
      0008CA 02r09r93         [24] 1916 	ljmp	00216$
      0008CD                       1917 00375$:
                                   1918 ;	main.c:198: printf_tiny("\n\r \n\r");
      0008CD C0 07            [24] 1919 	push	ar7
      0008CF C0 06            [24] 1920 	push	ar6
      0008D1 C0 05            [24] 1921 	push	ar5
      0008D3 C0 04            [24] 1922 	push	ar4
      0008D5 C0 01            [24] 1923 	push	ar1
      0008D7 C0 00            [24] 1924 	push	ar0
      0008D9 74rCE            [12] 1925 	mov	a,#___str_34
      0008DB C0 E0            [24] 1926 	push	acc
      0008DD 74s04            [12] 1927 	mov	a,#(___str_34 >> 8)
      0008DF C0 E0            [24] 1928 	push	acc
      0008E1 12r00r00         [24] 1929 	lcall	_printf_tiny
      0008E4 15 81            [12] 1930 	dec	sp
      0008E6 15 81            [12] 1931 	dec	sp
                                   1932 ;	main.c:199: printf_tiny("\n\r Buffer 1 starts at = 0x%x \n\r",buff1_start);
      0008E8 C0*0B            [24] 1933 	push	_main_sloc6_1_0
      0008EA C0*0C            [24] 1934 	push	(_main_sloc6_1_0 + 1)
      0008EC 74rD4            [12] 1935 	mov	a,#___str_35
      0008EE C0 E0            [24] 1936 	push	acc
      0008F0 74s04            [12] 1937 	mov	a,#(___str_35 >> 8)
      0008F2 C0 E0            [24] 1938 	push	acc
      0008F4 12r00r00         [24] 1939 	lcall	_printf_tiny
      0008F7 E5 81            [12] 1940 	mov	a,sp
      0008F9 24 FC            [12] 1941 	add	a,#0xfc
      0008FB F5 81            [12] 1942 	mov	sp,a
                                   1943 ;	main.c:200: printf_tiny("\n\r Buffer 1 ends at =x%x\n\r",buff1_start+buffer0_size);
      0008FD AA*0B            [24] 1944 	mov	r2,_main_sloc6_1_0
      0008FF AB*0C            [24] 1945 	mov	r3,(_main_sloc6_1_0 + 1)
      000901 E5*09            [12] 1946 	mov	a,_main_sloc5_1_0
      000903 2A               [12] 1947 	add	a,r2
      000904 FA               [12] 1948 	mov	r2,a
      000905 E5*0A            [12] 1949 	mov	a,(_main_sloc5_1_0 + 1)
      000907 3B               [12] 1950 	addc	a,r3
      000908 FB               [12] 1951 	mov	r3,a
      000909 C0 02            [24] 1952 	push	ar2
      00090B C0 03            [24] 1953 	push	ar3
      00090D 74rF4            [12] 1954 	mov	a,#___str_36
      00090F C0 E0            [24] 1955 	push	acc
      000911 74s04            [12] 1956 	mov	a,#(___str_36 >> 8)
      000913 C0 E0            [24] 1957 	push	acc
      000915 12r00r00         [24] 1958 	lcall	_printf_tiny
      000918 E5 81            [12] 1959 	mov	a,sp
      00091A 24 FC            [12] 1960 	add	a,#0xfc
      00091C F5 81            [12] 1961 	mov	sp,a
      00091E D0 00            [24] 1962 	pop	ar0
      000920 D0 01            [24] 1963 	pop	ar1
      000922 D0 04            [24] 1964 	pop	ar4
      000924 D0 05            [24] 1965 	pop	ar5
      000926 D0 06            [24] 1966 	pop	ar6
      000928 D0 07            [24] 1967 	pop	ar7
                                   1968 ;	main.c:201: printf_tiny("\n\r Buffer 1 size =%d\n\r",buffer0_size);
      00092A C0 07            [24] 1969 	push	ar7
      00092C C0 06            [24] 1970 	push	ar6
      00092E C0 05            [24] 1971 	push	ar5
      000930 C0 04            [24] 1972 	push	ar4
      000932 C0 01            [24] 1973 	push	ar1
      000934 C0 00            [24] 1974 	push	ar0
      000936 C0 06            [24] 1975 	push	ar6
      000938 C0 07            [24] 1976 	push	ar7
      00093A 74r0F            [12] 1977 	mov	a,#___str_37
      00093C C0 E0            [24] 1978 	push	acc
      00093E 74s05            [12] 1979 	mov	a,#(___str_37 >> 8)
      000940 C0 E0            [24] 1980 	push	acc
      000942 12r00r00         [24] 1981 	lcall	_printf_tiny
      000945 E5 81            [12] 1982 	mov	a,sp
      000947 24 FC            [12] 1983 	add	a,#0xfc
      000949 F5 81            [12] 1984 	mov	sp,a
                                   1985 ;	main.c:202: printf_tiny("\n\r number of storage characters in buffer 1=0\n\r");
      00094B 74r26            [12] 1986 	mov	a,#___str_38
      00094D C0 E0            [24] 1987 	push	acc
      00094F 74s05            [12] 1988 	mov	a,#(___str_38 >> 8)
      000951 C0 E0            [24] 1989 	push	acc
      000953 12r00r00         [24] 1990 	lcall	_printf_tiny
      000956 15 81            [12] 1991 	dec	sp
      000958 15 81            [12] 1992 	dec	sp
      00095A D0 00            [24] 1993 	pop	ar0
      00095C D0 01            [24] 1994 	pop	ar1
      00095E D0 04            [24] 1995 	pop	ar4
      000960 D0 05            [24] 1996 	pop	ar5
      000962 D0 06            [24] 1997 	pop	ar6
      000964 D0 07            [24] 1998 	pop	ar7
                                   1999 ;	main.c:203: printf_tiny("\n\r number of free spaces in buffer 1=%d\n\r",buffer0_size);
      000966 C0 07            [24] 2000 	push	ar7
      000968 C0 06            [24] 2001 	push	ar6
      00096A C0 05            [24] 2002 	push	ar5
      00096C C0 04            [24] 2003 	push	ar4
      00096E C0 01            [24] 2004 	push	ar1
      000970 C0 00            [24] 2005 	push	ar0
      000972 C0 06            [24] 2006 	push	ar6
      000974 C0 07            [24] 2007 	push	ar7
      000976 74r56            [12] 2008 	mov	a,#___str_39
      000978 C0 E0            [24] 2009 	push	acc
      00097A 74s05            [12] 2010 	mov	a,#(___str_39 >> 8)
      00097C C0 E0            [24] 2011 	push	acc
      00097E 12r00r00         [24] 2012 	lcall	_printf_tiny
      000981 E5 81            [12] 2013 	mov	a,sp
      000983 24 FC            [12] 2014 	add	a,#0xfc
      000985 F5 81            [12] 2015 	mov	sp,a
      000987 D0 00            [24] 2016 	pop	ar0
      000989 D0 01            [24] 2017 	pop	ar1
      00098B D0 04            [24] 2018 	pop	ar4
      00098D D0 05            [24] 2019 	pop	ar5
      00098F D0 06            [24] 2020 	pop	ar6
      000991 D0 07            [24] 2021 	pop	ar7
                                   2022 ;	main.c:206: for(x=2;x<=(extra_buffers+2);x++)
      000993                       2023 00216$:
      000993 74 02            [12] 2024 	mov	a,#0x02
      000995 25*04            [12] 2025 	add	a,_main_sloc2_1_0
      000997 FA               [12] 2026 	mov	r2,a
      000998 E4               [12] 2027 	clr	a
      000999 35*05            [12] 2028 	addc	a,(_main_sloc2_1_0 + 1)
      00099B FB               [12] 2029 	mov	r3,a
      00099C 75*0F 02         [24] 2030 	mov	_main_sloc8_1_0,#0x02
      00099F 75*10 00         [24] 2031 	mov	(_main_sloc8_1_0 + 1),#0x00
      0009A2                       2032 00176$:
      0009A2 C3               [12] 2033 	clr	c
      0009A3 EA               [12] 2034 	mov	a,r2
      0009A4 95*0F            [12] 2035 	subb	a,_main_sloc8_1_0
      0009A6 EB               [12] 2036 	mov	a,r3
      0009A7 64 80            [12] 2037 	xrl	a,#0x80
      0009A9 85*10 F0         [24] 2038 	mov	b,(_main_sloc8_1_0 + 1)
      0009AC 63 F0 80         [24] 2039 	xrl	b,#0x80
      0009AF 95 F0            [12] 2040 	subb	a,b
      0009B1 50 03            [24] 2041 	jnc	00376$
      0009B3 02r0ArEA         [24] 2042 	ljmp	00133$
      0009B6                       2043 00376$:
                                   2044 ;	main.c:208: if(buffer_n[x]!=0)
      0009B6 C0 00            [24] 2045 	push	ar0
      0009B8 C0 01            [24] 2046 	push	ar1
      0009BA E5*0F            [12] 2047 	mov	a,_main_sloc8_1_0
      0009BC 25*0F            [12] 2048 	add	a,_main_sloc8_1_0
      0009BE F8               [12] 2049 	mov	r0,a
      0009BF E5*10            [12] 2050 	mov	a,(_main_sloc8_1_0 + 1)
      0009C1 33               [12] 2051 	rlc	a
      0009C2 F9               [12] 2052 	mov	r1,a
      0009C3 E8               [12] 2053 	mov	a,r0
      0009C4 24r02            [12] 2054 	add	a,#_main_buffer_n_65536_47
      0009C6 F5 82            [12] 2055 	mov	dpl,a
      0009C8 E9               [12] 2056 	mov	a,r1
      0009C9 34s00            [12] 2057 	addc	a,#(_main_buffer_n_65536_47 >> 8)
      0009CB F5 83            [12] 2058 	mov	dph,a
      0009CD E0               [24] 2059 	movx	a,@dptr
      0009CE F8               [12] 2060 	mov	r0,a
      0009CF A3               [24] 2061 	inc	dptr
      0009D0 E0               [24] 2062 	movx	a,@dptr
      0009D1 48               [12] 2063 	orl	a,r0
      0009D2 D0 01            [24] 2064 	pop	ar1
      0009D4 D0 00            [24] 2065 	pop	ar0
      0009D6 70 03            [24] 2066 	jnz	00377$
      0009D8 02r0ArDF         [24] 2067 	ljmp	00177$
      0009DB                       2068 00377$:
                                   2069 ;	main.c:210: printf_tiny("\n\r \n\r");
      0009DB C0 00            [24] 2070 	push	ar0
      0009DD C0 01            [24] 2071 	push	ar1
      0009DF C0 07            [24] 2072 	push	ar7
      0009E1 C0 06            [24] 2073 	push	ar6
      0009E3 C0 05            [24] 2074 	push	ar5
      0009E5 C0 04            [24] 2075 	push	ar4
      0009E7 C0 03            [24] 2076 	push	ar3
      0009E9 C0 02            [24] 2077 	push	ar2
      0009EB C0 01            [24] 2078 	push	ar1
      0009ED C0 00            [24] 2079 	push	ar0
      0009EF 74rCE            [12] 2080 	mov	a,#___str_34
      0009F1 C0 E0            [24] 2081 	push	acc
      0009F3 74s04            [12] 2082 	mov	a,#(___str_34 >> 8)
      0009F5 C0 E0            [24] 2083 	push	acc
      0009F7 12r00r00         [24] 2084 	lcall	_printf_tiny
      0009FA 15 81            [12] 2085 	dec	sp
      0009FC 15 81            [12] 2086 	dec	sp
                                   2087 ;	main.c:211: printf_tiny("\n\r Buffer %d starts at = 0x%x \n\r",x,buff1_start);
      0009FE C0*0B            [24] 2088 	push	_main_sloc6_1_0
      000A00 C0*0C            [24] 2089 	push	(_main_sloc6_1_0 + 1)
      000A02 C0*0F            [24] 2090 	push	_main_sloc8_1_0
      000A04 C0*10            [24] 2091 	push	(_main_sloc8_1_0 + 1)
      000A06 74r80            [12] 2092 	mov	a,#___str_40
      000A08 C0 E0            [24] 2093 	push	acc
      000A0A 74s05            [12] 2094 	mov	a,#(___str_40 >> 8)
      000A0C C0 E0            [24] 2095 	push	acc
      000A0E 12r00r00         [24] 2096 	lcall	_printf_tiny
      000A11 E5 81            [12] 2097 	mov	a,sp
      000A13 24 FA            [12] 2098 	add	a,#0xfa
      000A15 F5 81            [12] 2099 	mov	sp,a
      000A17 D0 00            [24] 2100 	pop	ar0
      000A19 D0 01            [24] 2101 	pop	ar1
                                   2102 ;	main.c:212: printf_tiny("\n\r Buffer %d ends at =x%x\n\r",x,buff1_start+buffer0_size);
      000A1B A8*0B            [24] 2103 	mov	r0,_main_sloc6_1_0
      000A1D A9*0C            [24] 2104 	mov	r1,(_main_sloc6_1_0 + 1)
      000A1F E5*09            [12] 2105 	mov	a,_main_sloc5_1_0
      000A21 28               [12] 2106 	add	a,r0
      000A22 F8               [12] 2107 	mov	r0,a
      000A23 E5*0A            [12] 2108 	mov	a,(_main_sloc5_1_0 + 1)
      000A25 39               [12] 2109 	addc	a,r1
      000A26 F9               [12] 2110 	mov	r1,a
      000A27 C0 01            [24] 2111 	push	ar1
      000A29 C0 00            [24] 2112 	push	ar0
      000A2B C0 00            [24] 2113 	push	ar0
      000A2D C0 01            [24] 2114 	push	ar1
      000A2F C0*0F            [24] 2115 	push	_main_sloc8_1_0
      000A31 C0*10            [24] 2116 	push	(_main_sloc8_1_0 + 1)
      000A33 74rA1            [12] 2117 	mov	a,#___str_41
      000A35 C0 E0            [24] 2118 	push	acc
      000A37 74s05            [12] 2119 	mov	a,#(___str_41 >> 8)
      000A39 C0 E0            [24] 2120 	push	acc
      000A3B 12r00r00         [24] 2121 	lcall	_printf_tiny
      000A3E E5 81            [12] 2122 	mov	a,sp
      000A40 24 FA            [12] 2123 	add	a,#0xfa
      000A42 F5 81            [12] 2124 	mov	sp,a
      000A44 D0 00            [24] 2125 	pop	ar0
      000A46 D0 01            [24] 2126 	pop	ar1
      000A48 D0 02            [24] 2127 	pop	ar2
      000A4A D0 03            [24] 2128 	pop	ar3
      000A4C D0 04            [24] 2129 	pop	ar4
      000A4E D0 05            [24] 2130 	pop	ar5
      000A50 D0 06            [24] 2131 	pop	ar6
      000A52 D0 07            [24] 2132 	pop	ar7
                                   2133 ;	main.c:213: printf_tiny("\n\r Buffer %d size =%d\n\r",x,buffer0_size);
      000A54 C0 07            [24] 2134 	push	ar7
      000A56 C0 06            [24] 2135 	push	ar6
      000A58 C0 05            [24] 2136 	push	ar5
      000A5A C0 04            [24] 2137 	push	ar4
      000A5C C0 03            [24] 2138 	push	ar3
      000A5E C0 02            [24] 2139 	push	ar2
      000A60 C0 01            [24] 2140 	push	ar1
      000A62 C0 00            [24] 2141 	push	ar0
      000A64 C0 06            [24] 2142 	push	ar6
      000A66 C0 07            [24] 2143 	push	ar7
      000A68 C0*0F            [24] 2144 	push	_main_sloc8_1_0
      000A6A C0*10            [24] 2145 	push	(_main_sloc8_1_0 + 1)
      000A6C 74rBD            [12] 2146 	mov	a,#___str_42
      000A6E C0 E0            [24] 2147 	push	acc
      000A70 74s05            [12] 2148 	mov	a,#(___str_42 >> 8)
      000A72 C0 E0            [24] 2149 	push	acc
      000A74 12r00r00         [24] 2150 	lcall	_printf_tiny
      000A77 E5 81            [12] 2151 	mov	a,sp
      000A79 24 FA            [12] 2152 	add	a,#0xfa
      000A7B F5 81            [12] 2153 	mov	sp,a
                                   2154 ;	main.c:214: printf_tiny("\n\r number of storage characters in buffer %d=0\n\r",x);
      000A7D C0*0F            [24] 2155 	push	_main_sloc8_1_0
      000A7F C0*10            [24] 2156 	push	(_main_sloc8_1_0 + 1)
      000A81 74rD5            [12] 2157 	mov	a,#___str_43
      000A83 C0 E0            [24] 2158 	push	acc
      000A85 74s05            [12] 2159 	mov	a,#(___str_43 >> 8)
      000A87 C0 E0            [24] 2160 	push	acc
      000A89 12r00r00         [24] 2161 	lcall	_printf_tiny
      000A8C E5 81            [12] 2162 	mov	a,sp
      000A8E 24 FC            [12] 2163 	add	a,#0xfc
      000A90 F5 81            [12] 2164 	mov	sp,a
      000A92 D0 00            [24] 2165 	pop	ar0
      000A94 D0 01            [24] 2166 	pop	ar1
      000A96 D0 02            [24] 2167 	pop	ar2
      000A98 D0 03            [24] 2168 	pop	ar3
      000A9A D0 04            [24] 2169 	pop	ar4
      000A9C D0 05            [24] 2170 	pop	ar5
      000A9E D0 06            [24] 2171 	pop	ar6
      000AA0 D0 07            [24] 2172 	pop	ar7
                                   2173 ;	main.c:215: printf_tiny("\n\r number of free spaces in buffer %d=%d\n\r",x,buffer0_size);
      000AA2 C0 07            [24] 2174 	push	ar7
      000AA4 C0 06            [24] 2175 	push	ar6
      000AA6 C0 05            [24] 2176 	push	ar5
      000AA8 C0 04            [24] 2177 	push	ar4
      000AAA C0 03            [24] 2178 	push	ar3
      000AAC C0 02            [24] 2179 	push	ar2
      000AAE C0 01            [24] 2180 	push	ar1
      000AB0 C0 00            [24] 2181 	push	ar0
      000AB2 C0 06            [24] 2182 	push	ar6
      000AB4 C0 07            [24] 2183 	push	ar7
      000AB6 C0*0F            [24] 2184 	push	_main_sloc8_1_0
      000AB8 C0*10            [24] 2185 	push	(_main_sloc8_1_0 + 1)
      000ABA 74r06            [12] 2186 	mov	a,#___str_44
      000ABC C0 E0            [24] 2187 	push	acc
      000ABE 74s06            [12] 2188 	mov	a,#(___str_44 >> 8)
      000AC0 C0 E0            [24] 2189 	push	acc
      000AC2 12r00r00         [24] 2190 	lcall	_printf_tiny
      000AC5 E5 81            [12] 2191 	mov	a,sp
      000AC7 24 FA            [12] 2192 	add	a,#0xfa
      000AC9 F5 81            [12] 2193 	mov	sp,a
      000ACB D0 00            [24] 2194 	pop	ar0
      000ACD D0 01            [24] 2195 	pop	ar1
      000ACF D0 02            [24] 2196 	pop	ar2
      000AD1 D0 03            [24] 2197 	pop	ar3
      000AD3 D0 04            [24] 2198 	pop	ar4
      000AD5 D0 05            [24] 2199 	pop	ar5
      000AD7 D0 06            [24] 2200 	pop	ar6
      000AD9 D0 07            [24] 2201 	pop	ar7
                                   2202 ;	main.c:243: printf_tiny("\n\r invalid character input.try again\n\r");
      000ADB D0 01            [24] 2203 	pop	ar1
      000ADD D0 00            [24] 2204 	pop	ar0
                                   2205 ;	main.c:215: printf_tiny("\n\r number of free spaces in buffer %d=%d\n\r",x,buffer0_size);
      000ADF                       2206 00177$:
                                   2207 ;	main.c:206: for(x=2;x<=(extra_buffers+2);x++)
      000ADF 05*0F            [12] 2208 	inc	_main_sloc8_1_0
      000AE1 E4               [12] 2209 	clr	a
      000AE2 B5*0F 02         [24] 2210 	cjne	a,_main_sloc8_1_0,00378$
      000AE5 05*10            [12] 2211 	inc	(_main_sloc8_1_0 + 1)
      000AE7                       2212 00378$:
      000AE7 02r09rA2         [24] 2213 	ljmp	00176$
      000AEA                       2214 00133$:
                                   2215 ;	main.c:219: printf_tiny("\n\r characters in buffer 0\n\r");
      000AEA C0 07            [24] 2216 	push	ar7
      000AEC C0 06            [24] 2217 	push	ar6
      000AEE C0 05            [24] 2218 	push	ar5
      000AF0 C0 04            [24] 2219 	push	ar4
      000AF2 C0 01            [24] 2220 	push	ar1
      000AF4 C0 00            [24] 2221 	push	ar0
      000AF6 74r31            [12] 2222 	mov	a,#___str_45
      000AF8 C0 E0            [24] 2223 	push	acc
      000AFA 74s06            [12] 2224 	mov	a,#(___str_45 >> 8)
      000AFC C0 E0            [24] 2225 	push	acc
      000AFE 12r00r00         [24] 2226 	lcall	_printf_tiny
      000B01 15 81            [12] 2227 	dec	sp
      000B03 15 81            [12] 2228 	dec	sp
      000B05 D0 00            [24] 2229 	pop	ar0
      000B07 D0 01            [24] 2230 	pop	ar1
                                   2231 ;	main.c:220: printf_tiny("\n\r stored chars=%d\n\r",buff0_stored);
      000B09 90r00r40         [24] 2232 	mov	dptr,#_main_buff0_stored_65536_47
      000B0C E0               [24] 2233 	movx	a,@dptr
      000B0D FA               [12] 2234 	mov	r2,a
      000B0E A3               [24] 2235 	inc	dptr
      000B0F E0               [24] 2236 	movx	a,@dptr
      000B10 FB               [12] 2237 	mov	r3,a
      000B11 C0 03            [24] 2238 	push	ar3
      000B13 C0 02            [24] 2239 	push	ar2
      000B15 C0 01            [24] 2240 	push	ar1
      000B17 C0 00            [24] 2241 	push	ar0
      000B19 C0 02            [24] 2242 	push	ar2
      000B1B C0 03            [24] 2243 	push	ar3
      000B1D 74r4D            [12] 2244 	mov	a,#___str_46
      000B1F C0 E0            [24] 2245 	push	acc
      000B21 74s06            [12] 2246 	mov	a,#(___str_46 >> 8)
      000B23 C0 E0            [24] 2247 	push	acc
      000B25 12r00r00         [24] 2248 	lcall	_printf_tiny
      000B28 E5 81            [12] 2249 	mov	a,sp
      000B2A 24 FC            [12] 2250 	add	a,#0xfc
      000B2C F5 81            [12] 2251 	mov	sp,a
                                   2252 ;	main.c:221: printf_tiny("\n\r total characters entered=%d\n\r",char_count);
      000B2E 90r00r3E         [24] 2253 	mov	dptr,#_main_char_count_65536_47
      000B31 E0               [24] 2254 	movx	a,@dptr
      000B32 C0 E0            [24] 2255 	push	acc
      000B34 A3               [24] 2256 	inc	dptr
      000B35 E0               [24] 2257 	movx	a,@dptr
      000B36 C0 E0            [24] 2258 	push	acc
      000B38 74r62            [12] 2259 	mov	a,#___str_47
      000B3A C0 E0            [24] 2260 	push	acc
      000B3C 74s06            [12] 2261 	mov	a,#(___str_47 >> 8)
      000B3E C0 E0            [24] 2262 	push	acc
      000B40 12r00r00         [24] 2263 	lcall	_printf_tiny
      000B43 E5 81            [12] 2264 	mov	a,sp
      000B45 24 FC            [12] 2265 	add	a,#0xfc
      000B47 F5 81            [12] 2266 	mov	sp,a
      000B49 D0 00            [24] 2267 	pop	ar0
      000B4B D0 01            [24] 2268 	pop	ar1
      000B4D D0 02            [24] 2269 	pop	ar2
      000B4F D0 03            [24] 2270 	pop	ar3
      000B51 D0 04            [24] 2271 	pop	ar4
      000B53 D0 05            [24] 2272 	pop	ar5
      000B55 D0 06            [24] 2273 	pop	ar6
      000B57 D0 07            [24] 2274 	pop	ar7
                                   2275 ;	main.c:222: for(x=0;x<buff0_stored;x++)
      000B59 E4               [12] 2276 	clr	a
      000B5A F5*0F            [12] 2277 	mov	_main_sloc8_1_0,a
      000B5C F5*10            [12] 2278 	mov	(_main_sloc8_1_0 + 1),a
      000B5E                       2279 00179$:
      000B5E C0 00            [24] 2280 	push	ar0
      000B60 C0 01            [24] 2281 	push	ar1
      000B62 A8*0F            [24] 2282 	mov	r0,_main_sloc8_1_0
      000B64 A9*10            [24] 2283 	mov	r1,(_main_sloc8_1_0 + 1)
      000B66 C3               [12] 2284 	clr	c
      000B67 E8               [12] 2285 	mov	a,r0
      000B68 9A               [12] 2286 	subb	a,r2
      000B69 E9               [12] 2287 	mov	a,r1
      000B6A 9B               [12] 2288 	subb	a,r3
      000B6B D0 01            [24] 2289 	pop	ar1
      000B6D D0 00            [24] 2290 	pop	ar0
      000B6F 40 03            [24] 2291 	jc	00379$
      000B71 02r0Cr6D         [24] 2292 	ljmp	00137$
      000B74                       2293 00379$:
                                   2294 ;	main.c:224: putchar(*(buffer_0+x));
      000B74 C0 00            [24] 2295 	push	ar0
      000B76 C0 01            [24] 2296 	push	ar1
      000B78 E5*0F            [12] 2297 	mov	a,_main_sloc8_1_0
      000B7A 2C               [12] 2298 	add	a,r4
      000B7B F5*0D            [12] 2299 	mov	_main_sloc7_1_0,a
      000B7D E5*10            [12] 2300 	mov	a,(_main_sloc8_1_0 + 1)
      000B7F 3D               [12] 2301 	addc	a,r5
      000B80 F5*0E            [12] 2302 	mov	(_main_sloc7_1_0 + 1),a
      000B82 85*0D 82         [24] 2303 	mov	dpl,_main_sloc7_1_0
      000B85 85*0E 83         [24] 2304 	mov	dph,(_main_sloc7_1_0 + 1)
      000B88 E0               [24] 2305 	movx	a,@dptr
      000B89 F8               [12] 2306 	mov	r0,a
      000B8A 79 00            [12] 2307 	mov	r1,#0x00
      000B8C 88 82            [24] 2308 	mov	dpl,r0
      000B8E 89 83            [24] 2309 	mov	dph,r1
      000B90 C0 07            [24] 2310 	push	ar7
      000B92 C0 06            [24] 2311 	push	ar6
      000B94 C0 05            [24] 2312 	push	ar5
      000B96 C0 04            [24] 2313 	push	ar4
      000B98 C0 03            [24] 2314 	push	ar3
      000B9A C0 02            [24] 2315 	push	ar2
      000B9C C0 01            [24] 2316 	push	ar1
      000B9E C0 00            [24] 2317 	push	ar0
      000BA0 12r0Dr8F         [24] 2318 	lcall	_putchar
                                   2319 ;	main.c:225: if(x%32!=0){
      000BA3 90r00r00         [24] 2320 	mov	dptr,#__modsint_PARM_2
      000BA6 74 20            [12] 2321 	mov	a,#0x20
      000BA8 F0               [24] 2322 	movx	@dptr,a
      000BA9 E4               [12] 2323 	clr	a
      000BAA A3               [24] 2324 	inc	dptr
      000BAB F0               [24] 2325 	movx	@dptr,a
      000BAC 85*0F 82         [24] 2326 	mov	dpl,_main_sloc8_1_0
      000BAF 85*10 83         [24] 2327 	mov	dph,(_main_sloc8_1_0 + 1)
      000BB2 12r00r00         [24] 2328 	lcall	__modsint
      000BB5 E5 82            [12] 2329 	mov	a,dpl
      000BB7 85 83 F0         [24] 2330 	mov	b,dph
      000BBA D0 00            [24] 2331 	pop	ar0
      000BBC D0 01            [24] 2332 	pop	ar1
      000BBE D0 02            [24] 2333 	pop	ar2
      000BC0 D0 03            [24] 2334 	pop	ar3
      000BC2 D0 04            [24] 2335 	pop	ar4
      000BC4 D0 05            [24] 2336 	pop	ar5
      000BC6 D0 06            [24] 2337 	pop	ar6
      000BC8 D0 07            [24] 2338 	pop	ar7
      000BCA D0 01            [24] 2339 	pop	ar1
      000BCC D0 00            [24] 2340 	pop	ar0
      000BCE 45 F0            [12] 2341 	orl	a,b
      000BD0 60 49            [24] 2342 	jz	00135$
                                   2343 ;	main.c:226: printf_tiny("%c",*(buffer_0+x));
      000BD2 C0 00            [24] 2344 	push	ar0
      000BD4 C0 01            [24] 2345 	push	ar1
      000BD6 85*0D 82         [24] 2346 	mov	dpl,_main_sloc7_1_0
      000BD9 85*0E 83         [24] 2347 	mov	dph,(_main_sloc7_1_0 + 1)
      000BDC E0               [24] 2348 	movx	a,@dptr
      000BDD F8               [12] 2349 	mov	r0,a
      000BDE 79 00            [12] 2350 	mov	r1,#0x00
      000BE0 C0 07            [24] 2351 	push	ar7
      000BE2 C0 06            [24] 2352 	push	ar6
      000BE4 C0 05            [24] 2353 	push	ar5
      000BE6 C0 04            [24] 2354 	push	ar4
      000BE8 C0 03            [24] 2355 	push	ar3
      000BEA C0 02            [24] 2356 	push	ar2
      000BEC C0 01            [24] 2357 	push	ar1
      000BEE C0 00            [24] 2358 	push	ar0
      000BF0 C0 00            [24] 2359 	push	ar0
      000BF2 C0 01            [24] 2360 	push	ar1
      000BF4 74r83            [12] 2361 	mov	a,#___str_48
      000BF6 C0 E0            [24] 2362 	push	acc
      000BF8 74s06            [12] 2363 	mov	a,#(___str_48 >> 8)
      000BFA C0 E0            [24] 2364 	push	acc
      000BFC 12r00r00         [24] 2365 	lcall	_printf_tiny
      000BFF E5 81            [12] 2366 	mov	a,sp
      000C01 24 FC            [12] 2367 	add	a,#0xfc
      000C03 F5 81            [12] 2368 	mov	sp,a
      000C05 D0 00            [24] 2369 	pop	ar0
      000C07 D0 01            [24] 2370 	pop	ar1
      000C09 D0 02            [24] 2371 	pop	ar2
      000C0B D0 03            [24] 2372 	pop	ar3
      000C0D D0 04            [24] 2373 	pop	ar4
      000C0F D0 05            [24] 2374 	pop	ar5
      000C11 D0 06            [24] 2375 	pop	ar6
      000C13 D0 07            [24] 2376 	pop	ar7
      000C15 D0 01            [24] 2377 	pop	ar1
      000C17 D0 00            [24] 2378 	pop	ar0
      000C19 80 47            [24] 2379 	sjmp	00180$
      000C1B                       2380 00135$:
                                   2381 ;	main.c:230: printf_tiny("\n\r%c",*(buffer_0+x));
      000C1B C0 00            [24] 2382 	push	ar0
      000C1D C0 01            [24] 2383 	push	ar1
      000C1F 85*0D 82         [24] 2384 	mov	dpl,_main_sloc7_1_0
      000C22 85*0E 83         [24] 2385 	mov	dph,(_main_sloc7_1_0 + 1)
      000C25 E0               [24] 2386 	movx	a,@dptr
      000C26 F8               [12] 2387 	mov	r0,a
      000C27 79 00            [12] 2388 	mov	r1,#0x00
      000C29 C0 07            [24] 2389 	push	ar7
      000C2B C0 06            [24] 2390 	push	ar6
      000C2D C0 05            [24] 2391 	push	ar5
      000C2F C0 04            [24] 2392 	push	ar4
      000C31 C0 03            [24] 2393 	push	ar3
      000C33 C0 02            [24] 2394 	push	ar2
      000C35 C0 01            [24] 2395 	push	ar1
      000C37 C0 00            [24] 2396 	push	ar0
      000C39 C0 00            [24] 2397 	push	ar0
      000C3B C0 01            [24] 2398 	push	ar1
      000C3D 74r86            [12] 2399 	mov	a,#___str_49
      000C3F C0 E0            [24] 2400 	push	acc
      000C41 74s06            [12] 2401 	mov	a,#(___str_49 >> 8)
      000C43 C0 E0            [24] 2402 	push	acc
      000C45 12r00r00         [24] 2403 	lcall	_printf_tiny
      000C48 E5 81            [12] 2404 	mov	a,sp
      000C4A 24 FC            [12] 2405 	add	a,#0xfc
      000C4C F5 81            [12] 2406 	mov	sp,a
      000C4E D0 00            [24] 2407 	pop	ar0
      000C50 D0 01            [24] 2408 	pop	ar1
      000C52 D0 02            [24] 2409 	pop	ar2
      000C54 D0 03            [24] 2410 	pop	ar3
      000C56 D0 04            [24] 2411 	pop	ar4
      000C58 D0 05            [24] 2412 	pop	ar5
      000C5A D0 06            [24] 2413 	pop	ar6
      000C5C D0 07            [24] 2414 	pop	ar7
                                   2415 ;	main.c:243: printf_tiny("\n\r invalid character input.try again\n\r");
      000C5E D0 01            [24] 2416 	pop	ar1
      000C60 D0 00            [24] 2417 	pop	ar0
                                   2418 ;	main.c:230: printf_tiny("\n\r%c",*(buffer_0+x));
      000C62                       2419 00180$:
                                   2420 ;	main.c:222: for(x=0;x<buff0_stored;x++)
      000C62 05*0F            [12] 2421 	inc	_main_sloc8_1_0
      000C64 E4               [12] 2422 	clr	a
      000C65 B5*0F 02         [24] 2423 	cjne	a,_main_sloc8_1_0,00381$
      000C68 05*10            [12] 2424 	inc	(_main_sloc8_1_0 + 1)
      000C6A                       2425 00381$:
      000C6A 02r0Br5E         [24] 2426 	ljmp	00179$
      000C6D                       2427 00137$:
                                   2428 ;	main.c:235: char_count=0;
      000C6D 90r00r3E         [24] 2429 	mov	dptr,#_main_char_count_65536_47
      000C70 E4               [12] 2430 	clr	a
      000C71 F0               [24] 2431 	movx	@dptr,a
      000C72 A3               [24] 2432 	inc	dptr
      000C73 F0               [24] 2433 	movx	@dptr,a
                                   2434 ;	main.c:236: buff0_stored=0;
      000C74 90r00r40         [24] 2435 	mov	dptr,#_main_buff0_stored_65536_47
      000C77 F0               [24] 2436 	movx	@dptr,a
      000C78 A3               [24] 2437 	inc	dptr
      000C79 F0               [24] 2438 	movx	@dptr,a
                                   2439 ;	main.c:237: printf_tiny("\n\r heap report is done\n\r");
      000C7A C0 07            [24] 2440 	push	ar7
      000C7C C0 06            [24] 2441 	push	ar6
      000C7E C0 05            [24] 2442 	push	ar5
      000C80 C0 04            [24] 2443 	push	ar4
      000C82 C0 01            [24] 2444 	push	ar1
      000C84 C0 00            [24] 2445 	push	ar0
      000C86 74r8B            [12] 2446 	mov	a,#___str_50
      000C88 C0 E0            [24] 2447 	push	acc
      000C8A 74s06            [12] 2448 	mov	a,#(___str_50 >> 8)
      000C8C C0 E0            [24] 2449 	push	acc
      000C8E 12r00r00         [24] 2450 	lcall	_printf_tiny
      000C91 15 81            [12] 2451 	dec	sp
      000C93 15 81            [12] 2452 	dec	sp
      000C95 D0 00            [24] 2453 	pop	ar0
      000C97 D0 01            [24] 2454 	pop	ar1
      000C99 D0 04            [24] 2455 	pop	ar4
      000C9B D0 05            [24] 2456 	pop	ar5
      000C9D D0 06            [24] 2457 	pop	ar6
      000C9F D0 07            [24] 2458 	pop	ar7
      000CA1 02r01r57         [24] 2459 	ljmp	00167$
      000CA4                       2460 00139$:
                                   2461 ;	main.c:243: printf_tiny("\n\r invalid character input.try again\n\r");
      000CA4 C0 07            [24] 2462 	push	ar7
      000CA6 C0 06            [24] 2463 	push	ar6
      000CA8 C0 05            [24] 2464 	push	ar5
      000CAA C0 04            [24] 2465 	push	ar4
      000CAC C0 01            [24] 2466 	push	ar1
      000CAE C0 00            [24] 2467 	push	ar0
      000CB0 74rA4            [12] 2468 	mov	a,#___str_51
      000CB2 C0 E0            [24] 2469 	push	acc
      000CB4 74s06            [12] 2470 	mov	a,#(___str_51 >> 8)
      000CB6 C0 E0            [24] 2471 	push	acc
      000CB8 12r00r00         [24] 2472 	lcall	_printf_tiny
      000CBB 15 81            [12] 2473 	dec	sp
      000CBD 15 81            [12] 2474 	dec	sp
      000CBF D0 00            [24] 2475 	pop	ar0
      000CC1 D0 01            [24] 2476 	pop	ar1
      000CC3 D0 04            [24] 2477 	pop	ar4
      000CC5 D0 05            [24] 2478 	pop	ar5
      000CC7 D0 06            [24] 2479 	pop	ar6
      000CC9 D0 07            [24] 2480 	pop	ar7
                                   2481 ;	main.c:248: }
      000CCB 02r01r57         [24] 2482 	ljmp	00167$
                                   2483 ;------------------------------------------------------------
                                   2484 ;Allocation info for local variables in function 'buff0size'
                                   2485 ;------------------------------------------------------------
                                   2486 ;valid                     Allocated with name '_buff0size_valid_65536_81'
                                   2487 ;num                       Allocated with name '_buff0size_num_65536_81'
                                   2488 ;div16                     Allocated with name '_buff0size_div16_131073_83'
                                   2489 ;------------------------------------------------------------
                                   2490 ;	main.c:249: int buff0size()
                                   2491 ;	-----------------------------------------
                                   2492 ;	 function buff0size
                                   2493 ;	-----------------------------------------
      000CCE                       2494 _buff0size:
                                   2495 ;	main.c:253: printf_tiny("\n\r WELCOME \n\r");
      000CCE 74rCB            [12] 2496 	mov	a,#___str_52
      000CD0 C0 E0            [24] 2497 	push	acc
      000CD2 74s06            [12] 2498 	mov	a,#(___str_52 >> 8)
      000CD4 C0 E0            [24] 2499 	push	acc
      000CD6 12r00r00         [24] 2500 	lcall	_printf_tiny
      000CD9 15 81            [12] 2501 	dec	sp
      000CDB 15 81            [12] 2502 	dec	sp
                                   2503 ;	main.c:254: printf_tiny("Enter  a number between 32 and 4800 which is divisible by 16\n\r");
      000CDD 74rD9            [12] 2504 	mov	a,#___str_53
      000CDF C0 E0            [24] 2505 	push	acc
      000CE1 74s06            [12] 2506 	mov	a,#(___str_53 >> 8)
      000CE3 C0 E0            [24] 2507 	push	acc
      000CE5 12r00r00         [24] 2508 	lcall	_printf_tiny
      000CE8 15 81            [12] 2509 	dec	sp
      000CEA 15 81            [12] 2510 	dec	sp
                                   2511 ;	main.c:256: do
      000CEC                       2512 00106$:
                                   2513 ;	main.c:259: num=input_num();
      000CEC 12r0DrAE         [24] 2514 	lcall	_input_num
      000CEF AE 82            [24] 2515 	mov	r6,dpl
      000CF1 AF 83            [24] 2516 	mov	r7,dph
                                   2517 ;	main.c:261: int div16=num%16;
      000CF3 90r00r00         [24] 2518 	mov	dptr,#__modsint_PARM_2
      000CF6 74 10            [12] 2519 	mov	a,#0x10
      000CF8 F0               [24] 2520 	movx	@dptr,a
      000CF9 E4               [12] 2521 	clr	a
      000CFA A3               [24] 2522 	inc	dptr
      000CFB F0               [24] 2523 	movx	@dptr,a
                                   2524 ;	main.c:263: printf_tiny(" input number:%d\n\r",num);
      000CFC 8E 82            [24] 2525 	mov	dpl,r6
      000CFE 8F 83            [24] 2526 	mov	dph,r7
      000D00 C0 07            [24] 2527 	push	ar7
      000D02 C0 06            [24] 2528 	push	ar6
      000D04 12r00r00         [24] 2529 	lcall	__modsint
      000D07 AC 82            [24] 2530 	mov	r4,dpl
      000D09 AD 83            [24] 2531 	mov	r5,dph
      000D0B D0 06            [24] 2532 	pop	ar6
      000D0D D0 07            [24] 2533 	pop	ar7
      000D0F C0 07            [24] 2534 	push	ar7
      000D11 C0 06            [24] 2535 	push	ar6
      000D13 C0 05            [24] 2536 	push	ar5
      000D15 C0 04            [24] 2537 	push	ar4
      000D17 C0 06            [24] 2538 	push	ar6
      000D19 C0 07            [24] 2539 	push	ar7
      000D1B 74r18            [12] 2540 	mov	a,#___str_54
      000D1D C0 E0            [24] 2541 	push	acc
      000D1F 74s07            [12] 2542 	mov	a,#(___str_54 >> 8)
      000D21 C0 E0            [24] 2543 	push	acc
      000D23 12r00r00         [24] 2544 	lcall	_printf_tiny
      000D26 E5 81            [12] 2545 	mov	a,sp
      000D28 24 FC            [12] 2546 	add	a,#0xfc
      000D2A F5 81            [12] 2547 	mov	sp,a
      000D2C D0 04            [24] 2548 	pop	ar4
      000D2E D0 05            [24] 2549 	pop	ar5
      000D30 D0 06            [24] 2550 	pop	ar6
      000D32 D0 07            [24] 2551 	pop	ar7
                                   2552 ;	main.c:264: if((div16==0) && ((num>=32) && (num <=4800)))
      000D34 EC               [12] 2553 	mov	a,r4
      000D35 4D               [12] 2554 	orl	a,r5
      000D36 70 32            [24] 2555 	jnz	00102$
      000D38 C3               [12] 2556 	clr	c
      000D39 EE               [12] 2557 	mov	a,r6
      000D3A 94 20            [12] 2558 	subb	a,#0x20
      000D3C EF               [12] 2559 	mov	a,r7
      000D3D 64 80            [12] 2560 	xrl	a,#0x80
      000D3F 94 80            [12] 2561 	subb	a,#0x80
      000D41 40 27            [24] 2562 	jc	00102$
      000D43 74 C0            [12] 2563 	mov	a,#0xc0
      000D45 9E               [12] 2564 	subb	a,r6
      000D46 74 92            [12] 2565 	mov	a,#(0x12 ^ 0x80)
      000D48 8F F0            [24] 2566 	mov	b,r7
      000D4A 63 F0 80         [24] 2567 	xrl	b,#0x80
      000D4D 95 F0            [12] 2568 	subb	a,b
      000D4F 40 19            [24] 2569 	jc	00102$
                                   2570 ;	main.c:266: printf_tiny("valid input\n\r");
      000D51 C0 07            [24] 2571 	push	ar7
      000D53 C0 06            [24] 2572 	push	ar6
      000D55 74r2B            [12] 2573 	mov	a,#___str_55
      000D57 C0 E0            [24] 2574 	push	acc
      000D59 74s07            [12] 2575 	mov	a,#(___str_55 >> 8)
      000D5B C0 E0            [24] 2576 	push	acc
      000D5D 12r00r00         [24] 2577 	lcall	_printf_tiny
      000D60 15 81            [12] 2578 	dec	sp
      000D62 15 81            [12] 2579 	dec	sp
      000D64 D0 06            [24] 2580 	pop	ar6
      000D66 D0 07            [24] 2581 	pop	ar7
                                   2582 ;	main.c:267: valid=1;
      000D68 80 12            [24] 2583 	sjmp	00107$
      000D6A                       2584 00102$:
                                   2585 ;	main.c:271: printf_tiny("InValid input. Try again\n\r");
      000D6A 74r39            [12] 2586 	mov	a,#___str_56
      000D6C C0 E0            [24] 2587 	push	acc
      000D6E 74s07            [12] 2588 	mov	a,#(___str_56 >> 8)
      000D70 C0 E0            [24] 2589 	push	acc
      000D72 12r00r00         [24] 2590 	lcall	_printf_tiny
      000D75 15 81            [12] 2591 	dec	sp
      000D77 15 81            [12] 2592 	dec	sp
                                   2593 ;	main.c:275: }while(valid==0);
      000D79 02r0CrEC         [24] 2594 	ljmp	00106$
                                   2595 ;	main.c:272: valid=0;
      000D7C                       2596 00107$:
                                   2597 ;	main.c:277: return num;
      000D7C 8E 82            [24] 2598 	mov	dpl,r6
      000D7E 8F 83            [24] 2599 	mov	dph,r7
                                   2600 ;	main.c:279: }
      000D80 22               [24] 2601 	ret
                                   2602 ;------------------------------------------------------------
                                   2603 ;Allocation info for local variables in function 'getchar'
                                   2604 ;------------------------------------------------------------
                                   2605 ;	main.c:280: int getchar(void)
                                   2606 ;	-----------------------------------------
                                   2607 ;	 function getchar
                                   2608 ;	-----------------------------------------
      000D81                       2609 _getchar:
                                   2610 ;	main.c:283: while(!RI)
      000D81                       2611 00101$:
                                   2612 ;	main.c:288: RI=0;
                                   2613 ;	assignBit
      000D81 10 98 02         [24] 2614 	jbc	_RI,00114$
      000D84 80 FB            [24] 2615 	sjmp	00101$
      000D86                       2616 00114$:
                                   2617 ;	main.c:289: return SBUF;
      000D86 AE 99            [24] 2618 	mov	r6,_SBUF
      000D88 7F 00            [12] 2619 	mov	r7,#0x00
      000D8A 8E 82            [24] 2620 	mov	dpl,r6
      000D8C 8F 83            [24] 2621 	mov	dph,r7
                                   2622 ;	main.c:290: }
      000D8E 22               [24] 2623 	ret
                                   2624 ;------------------------------------------------------------
                                   2625 ;Allocation info for local variables in function 'putchar'
                                   2626 ;------------------------------------------------------------
                                   2627 ;x                         Allocated with name '_putchar_x_65536_89'
                                   2628 ;------------------------------------------------------------
                                   2629 ;	main.c:291: int putchar(int x)
                                   2630 ;	-----------------------------------------
                                   2631 ;	 function putchar
                                   2632 ;	-----------------------------------------
      000D8F                       2633 _putchar:
      000D8F AF 83            [24] 2634 	mov	r7,dph
      000D91 E5 82            [12] 2635 	mov	a,dpl
      000D93 90r00r80         [24] 2636 	mov	dptr,#_putchar_x_65536_89
      000D96 F0               [24] 2637 	movx	@dptr,a
      000D97 EF               [12] 2638 	mov	a,r7
      000D98 A3               [24] 2639 	inc	dptr
      000D99 F0               [24] 2640 	movx	@dptr,a
                                   2641 ;	main.c:294: while(!TI){
      000D9A                       2642 00101$:
      000D9A 30 99 FD         [24] 2643 	jnb	_TI,00101$
                                   2644 ;	main.c:297: SBUF=x;
      000D9D 90r00r80         [24] 2645 	mov	dptr,#_putchar_x_65536_89
      000DA0 E0               [24] 2646 	movx	a,@dptr
      000DA1 FE               [12] 2647 	mov	r6,a
      000DA2 A3               [24] 2648 	inc	dptr
      000DA3 E0               [24] 2649 	movx	a,@dptr
      000DA4 FF               [12] 2650 	mov	r7,a
      000DA5 8E 99            [24] 2651 	mov	_SBUF,r6
                                   2652 ;	main.c:298: TI=0;
                                   2653 ;	assignBit
      000DA7 C2 99            [12] 2654 	clr	_TI
                                   2655 ;	main.c:299: return x;
      000DA9 8E 82            [24] 2656 	mov	dpl,r6
      000DAB 8F 83            [24] 2657 	mov	dph,r7
                                   2658 ;	main.c:300: }
      000DAD 22               [24] 2659 	ret
                                   2660 ;------------------------------------------------------------
                                   2661 ;Allocation info for local variables in function 'input_num'
                                   2662 ;------------------------------------------------------------
                                   2663 ;number                    Allocated with name '_input_num_number_65536_92'
                                   2664 ;count                     Allocated with name '_input_num_count_65536_92'
                                   2665 ;input_digit               Allocated with name '_input_num_input_digit_65536_92'
                                   2666 ;input_digits              Allocated with name '_input_num_input_digits_65536_92'
                                   2667 ;i                         Allocated with name '_input_num_i_131072_96'
                                   2668 ;------------------------------------------------------------
                                   2669 ;	main.c:302: uint16_t input_num()
                                   2670 ;	-----------------------------------------
                                   2671 ;	 function input_num
                                   2672 ;	-----------------------------------------
      000DAE                       2673 _input_num:
                                   2674 ;	main.c:304: __xdata uint16_t number=0;
      000DAE 90r00r82         [24] 2675 	mov	dptr,#_input_num_number_65536_92
      000DB1 E4               [12] 2676 	clr	a
      000DB2 F0               [24] 2677 	movx	@dptr,a
      000DB3 A3               [24] 2678 	inc	dptr
      000DB4 F0               [24] 2679 	movx	@dptr,a
                                   2680 ;	main.c:305: __xdata uint8_t count=0;
      000DB5 90r00r84         [24] 2681 	mov	dptr,#_input_num_count_65536_92
      000DB8 F0               [24] 2682 	movx	@dptr,a
                                   2683 ;	main.c:306: __xdata uint8_t input_digit=0;
      000DB9 90r00r85         [24] 2684 	mov	dptr,#_input_num_input_digit_65536_92
      000DBC F0               [24] 2685 	movx	@dptr,a
                                   2686 ;	main.c:308: printf_tiny("\n\r enter the input\n\r");
      000DBD 74r1E            [12] 2687 	mov	a,#___str_12
      000DBF C0 E0            [24] 2688 	push	acc
      000DC1 74s02            [12] 2689 	mov	a,#(___str_12 >> 8)
      000DC3 C0 E0            [24] 2690 	push	acc
      000DC5 12r00r00         [24] 2691 	lcall	_printf_tiny
      000DC8 15 81            [12] 2692 	dec	sp
      000DCA 15 81            [12] 2693 	dec	sp
                                   2694 ;	main.c:309: while(input_digit!=13)
      000DCC                       2695 00107$:
      000DCC 90r00r85         [24] 2696 	mov	dptr,#_input_num_input_digit_65536_92
      000DCF E0               [24] 2697 	movx	a,@dptr
      000DD0 FF               [12] 2698 	mov	r7,a
      000DD1 BF 0D 02         [24] 2699 	cjne	r7,#0x0d,00145$
      000DD4 80 51            [24] 2700 	sjmp	00122$
      000DD6                       2701 00145$:
                                   2702 ;	main.c:312: input_digit=getchar();
      000DD6 12r0Dr81         [24] 2703 	lcall	_getchar
      000DD9 AE 82            [24] 2704 	mov	r6,dpl
      000DDB AF 83            [24] 2705 	mov	r7,dph
      000DDD 90r00r85         [24] 2706 	mov	dptr,#_input_num_input_digit_65536_92
      000DE0 EE               [12] 2707 	mov	a,r6
      000DE1 F0               [24] 2708 	movx	@dptr,a
                                   2709 ;	main.c:313: if(input_digit==8)
      000DE2 BE 08 0E         [24] 2710 	cjne	r6,#0x08,00105$
                                   2711 ;	main.c:315: putchar(8);
      000DE5 90 00 08         [24] 2712 	mov	dptr,#0x0008
      000DE8 12r0Dr8F         [24] 2713 	lcall	_putchar
                                   2714 ;	main.c:316: count--;
      000DEB 90r00r84         [24] 2715 	mov	dptr,#_input_num_count_65536_92
      000DEE E0               [24] 2716 	movx	a,@dptr
      000DEF 14               [12] 2717 	dec	a
      000DF0 F0               [24] 2718 	movx	@dptr,a
      000DF1 80 D9            [24] 2719 	sjmp	00107$
      000DF3                       2720 00105$:
                                   2721 ;	main.c:319: else if((input_digit<='9') && (input_digit>='0'))
      000DF3 EE               [12] 2722 	mov	a,r6
      000DF4 24 C6            [12] 2723 	add	a,#0xff - 0x39
      000DF6 40 D4            [24] 2724 	jc	00107$
      000DF8 BE 30 00         [24] 2725 	cjne	r6,#0x30,00149$
      000DFB                       2726 00149$:
      000DFB 40 CF            [24] 2727 	jc	00107$
                                   2728 ;	main.c:321: putchar(input_digit);
      000DFD 8E 05            [24] 2729 	mov	ar5,r6
      000DFF 7F 00            [12] 2730 	mov	r7,#0x00
      000E01 8D 82            [24] 2731 	mov	dpl,r5
      000E03 8F 83            [24] 2732 	mov	dph,r7
      000E05 C0 06            [24] 2733 	push	ar6
      000E07 12r0Dr8F         [24] 2734 	lcall	_putchar
      000E0A D0 06            [24] 2735 	pop	ar6
                                   2736 ;	main.c:322: input_digits[count]=input_digit-'0';
      000E0C 90r00r84         [24] 2737 	mov	dptr,#_input_num_count_65536_92
      000E0F E0               [24] 2738 	movx	a,@dptr
      000E10 FF               [12] 2739 	mov	r7,a
      000E11 24r86            [12] 2740 	add	a,#_input_num_input_digits_65536_92
      000E13 F5 82            [12] 2741 	mov	dpl,a
      000E15 E4               [12] 2742 	clr	a
      000E16 34s00            [12] 2743 	addc	a,#(_input_num_input_digits_65536_92 >> 8)
      000E18 F5 83            [12] 2744 	mov	dph,a
      000E1A EE               [12] 2745 	mov	a,r6
      000E1B 24 D0            [12] 2746 	add	a,#0xd0
      000E1D FE               [12] 2747 	mov	r6,a
      000E1E F0               [24] 2748 	movx	@dptr,a
                                   2749 ;	main.c:323: count++;
      000E1F 90r00r84         [24] 2750 	mov	dptr,#_input_num_count_65536_92
      000E22 EF               [12] 2751 	mov	a,r7
      000E23 04               [12] 2752 	inc	a
      000E24 F0               [24] 2753 	movx	@dptr,a
                                   2754 ;	main.c:328: for(int i=0;i<count;i++)
      000E25 80 A5            [24] 2755 	sjmp	00107$
      000E27                       2756 00122$:
      000E27 90r00r84         [24] 2757 	mov	dptr,#_input_num_count_65536_92
      000E2A E0               [24] 2758 	movx	a,@dptr
      000E2B FF               [12] 2759 	mov	r7,a
      000E2C 7D 00            [12] 2760 	mov	r5,#0x00
      000E2E 7E 00            [12] 2761 	mov	r6,#0x00
      000E30                       2762 00112$:
      000E30 8F 03            [24] 2763 	mov	ar3,r7
      000E32 7C 00            [12] 2764 	mov	r4,#0x00
      000E34 C3               [12] 2765 	clr	c
      000E35 ED               [12] 2766 	mov	a,r5
      000E36 9B               [12] 2767 	subb	a,r3
      000E37 EE               [12] 2768 	mov	a,r6
      000E38 64 80            [12] 2769 	xrl	a,#0x80
      000E3A 8C F0            [24] 2770 	mov	b,r4
      000E3C 63 F0 80         [24] 2771 	xrl	b,#0x80
      000E3F 95 F0            [12] 2772 	subb	a,b
      000E41 50 59            [24] 2773 	jnc	00110$
                                   2774 ;	main.c:330: number=number*10;
      000E43 90r00r82         [24] 2775 	mov	dptr,#_input_num_number_65536_92
      000E46 E0               [24] 2776 	movx	a,@dptr
      000E47 FB               [12] 2777 	mov	r3,a
      000E48 A3               [24] 2778 	inc	dptr
      000E49 E0               [24] 2779 	movx	a,@dptr
      000E4A FC               [12] 2780 	mov	r4,a
      000E4B 90r00r00         [24] 2781 	mov	dptr,#__mulint_PARM_2
      000E4E EB               [12] 2782 	mov	a,r3
      000E4F F0               [24] 2783 	movx	@dptr,a
      000E50 EC               [12] 2784 	mov	a,r4
      000E51 A3               [24] 2785 	inc	dptr
      000E52 F0               [24] 2786 	movx	@dptr,a
      000E53 90 00 0A         [24] 2787 	mov	dptr,#0x000a
      000E56 C0 07            [24] 2788 	push	ar7
      000E58 C0 06            [24] 2789 	push	ar6
      000E5A C0 05            [24] 2790 	push	ar5
      000E5C 12r00r00         [24] 2791 	lcall	__mulint
      000E5F AB 82            [24] 2792 	mov	r3,dpl
      000E61 AC 83            [24] 2793 	mov	r4,dph
      000E63 D0 05            [24] 2794 	pop	ar5
      000E65 D0 06            [24] 2795 	pop	ar6
      000E67 D0 07            [24] 2796 	pop	ar7
      000E69 90r00r82         [24] 2797 	mov	dptr,#_input_num_number_65536_92
      000E6C EB               [12] 2798 	mov	a,r3
      000E6D F0               [24] 2799 	movx	@dptr,a
      000E6E EC               [12] 2800 	mov	a,r4
      000E6F A3               [24] 2801 	inc	dptr
      000E70 F0               [24] 2802 	movx	@dptr,a
                                   2803 ;	main.c:331: number=number+input_digits[i];
      000E71 ED               [12] 2804 	mov	a,r5
      000E72 24r86            [12] 2805 	add	a,#_input_num_input_digits_65536_92
      000E74 F5 82            [12] 2806 	mov	dpl,a
      000E76 EE               [12] 2807 	mov	a,r6
      000E77 34s00            [12] 2808 	addc	a,#(_input_num_input_digits_65536_92 >> 8)
      000E79 F5 83            [12] 2809 	mov	dph,a
      000E7B E0               [24] 2810 	movx	a,@dptr
      000E7C FC               [12] 2811 	mov	r4,a
      000E7D 7B 00            [12] 2812 	mov	r3,#0x00
      000E7F 90r00r82         [24] 2813 	mov	dptr,#_input_num_number_65536_92
      000E82 E0               [24] 2814 	movx	a,@dptr
      000E83 F9               [12] 2815 	mov	r1,a
      000E84 A3               [24] 2816 	inc	dptr
      000E85 E0               [24] 2817 	movx	a,@dptr
      000E86 FA               [12] 2818 	mov	r2,a
      000E87 EC               [12] 2819 	mov	a,r4
      000E88 29               [12] 2820 	add	a,r1
      000E89 F9               [12] 2821 	mov	r1,a
      000E8A EB               [12] 2822 	mov	a,r3
      000E8B 3A               [12] 2823 	addc	a,r2
      000E8C FA               [12] 2824 	mov	r2,a
      000E8D 90r00r82         [24] 2825 	mov	dptr,#_input_num_number_65536_92
      000E90 E9               [12] 2826 	mov	a,r1
      000E91 F0               [24] 2827 	movx	@dptr,a
      000E92 EA               [12] 2828 	mov	a,r2
      000E93 A3               [24] 2829 	inc	dptr
      000E94 F0               [24] 2830 	movx	@dptr,a
                                   2831 ;	main.c:328: for(int i=0;i<count;i++)
      000E95 0D               [12] 2832 	inc	r5
      000E96 BD 00 97         [24] 2833 	cjne	r5,#0x00,00112$
      000E99 0E               [12] 2834 	inc	r6
      000E9A 80 94            [24] 2835 	sjmp	00112$
      000E9C                       2836 00110$:
                                   2837 ;	main.c:334: printf_tiny("\n\r entered input:%d\n\r",number);
      000E9C 90r00r82         [24] 2838 	mov	dptr,#_input_num_number_65536_92
      000E9F E0               [24] 2839 	movx	a,@dptr
      000EA0 FE               [12] 2840 	mov	r6,a
      000EA1 A3               [24] 2841 	inc	dptr
      000EA2 E0               [24] 2842 	movx	a,@dptr
      000EA3 FF               [12] 2843 	mov	r7,a
      000EA4 C0 07            [24] 2844 	push	ar7
      000EA6 C0 06            [24] 2845 	push	ar6
      000EA8 C0 06            [24] 2846 	push	ar6
      000EAA C0 07            [24] 2847 	push	ar7
      000EAC 74r54            [12] 2848 	mov	a,#___str_57
      000EAE C0 E0            [24] 2849 	push	acc
      000EB0 74s07            [12] 2850 	mov	a,#(___str_57 >> 8)
      000EB2 C0 E0            [24] 2851 	push	acc
      000EB4 12r00r00         [24] 2852 	lcall	_printf_tiny
      000EB7 E5 81            [12] 2853 	mov	a,sp
      000EB9 24 FC            [12] 2854 	add	a,#0xfc
      000EBB F5 81            [12] 2855 	mov	sp,a
      000EBD D0 06            [24] 2856 	pop	ar6
      000EBF D0 07            [24] 2857 	pop	ar7
                                   2858 ;	main.c:335: return number;
      000EC1 8E 82            [24] 2859 	mov	dpl,r6
      000EC3 8F 83            [24] 2860 	mov	dph,r7
                                   2861 ;	main.c:336: }
      000EC5 22               [24] 2862 	ret
                                   2863 	.area CSEG    (CODE)
                                   2864 	.area CONST   (CODE)
                                   2865 	.area CONST   (CODE)
      000000                       2866 ___str_0:
      000000 6D 65 6D 6F 72 79 20  2867 	.ascii "memory insufficient. buffer 0 malloc failed"
             69 6E 73 75 66 66 69
             63 69 65 6E 74 2E 20
             62 75 66 66 65 72 20
             30 20 6D 61 6C 6C 6F
             63 20 66 61 69 6C 65
             64
      00002B 0A                    2868 	.db 0x0a
      00002C 0D                    2869 	.db 0x0d
      00002D 00                    2870 	.db 0x00
                                   2871 	.area CSEG    (CODE)
                                   2872 	.area CONST   (CODE)
      00002E                       2873 ___str_1:
      00002E 62 75 66 66 65 72 20  2874 	.ascii "buffer 1 malloc failed. free all malloc"
             31 20 6D 61 6C 6C 6F
             63 20 66 61 69 6C 65
             64 2E 20 66 72 65 65
             20 61 6C 6C 20 6D 61
             6C 6C 6F 63
      000055 0A                    2875 	.db 0x0a
      000056 0D                    2876 	.db 0x0d
      000057 00                    2877 	.db 0x00
                                   2878 	.area CSEG    (CODE)
                                   2879 	.area CONST   (CODE)
      000058                       2880 ___str_2:
      000058 4D 65 6D 6F 72 79 20  2881 	.ascii "Memory allocated successfully for buffer 0 and buffer 1"
             61 6C 6C 6F 63 61 74
             65 64 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79 20 66 6F 72 20 62
             75 66 66 65 72 20 30
             20 61 6E 64 20 62 75
             66 66 65 72 20 31
      00008F 0A                    2882 	.db 0x0a
      000090 0D                    2883 	.db 0x0d
      000091 00                    2884 	.db 0x00
                                   2885 	.area CSEG    (CODE)
                                   2886 	.area CONST   (CODE)
      000092                       2887 ___str_3:
      000092 62 75 66 66 65 72 20  2888 	.ascii "buffer 0 starts at address: 0x%x"
             30 20 73 74 61 72 74
             73 20 61 74 20 61 64
             64 72 65 73 73 3A 20
             30 78 25 78
      0000B2 0A                    2889 	.db 0x0a
      0000B3 0D                    2890 	.db 0x0d
      0000B4 00                    2891 	.db 0x00
                                   2892 	.area CSEG    (CODE)
                                   2893 	.area CONST   (CODE)
      0000B5                       2894 ___str_4:
      0000B5 62 75 66 66 65 72 20  2895 	.ascii "buffer 1 starts at address: 0x%x"
             31 20 73 74 61 72 74
             73 20 61 74 20 61 64
             64 72 65 73 73 3A 20
             30 78 25 78
      0000D5 0A                    2896 	.db 0x0a
      0000D6 0D                    2897 	.db 0x0d
      0000D7 00                    2898 	.db 0x00
                                   2899 	.area CSEG    (CODE)
                                   2900 	.area CONST   (CODE)
      0000D8                       2901 ___str_5:
      0000D8 0A                    2902 	.db 0x0a
      0000D9 0D                    2903 	.db 0x0d
      0000DA 20 4F 50 54 49 4F 4E  2904 	.ascii " OPTIONS "
             53 20
      0000E3 0A                    2905 	.db 0x0a
      0000E4 0D                    2906 	.db 0x0d
      0000E5 00                    2907 	.db 0x00
                                   2908 	.area CSEG    (CODE)
                                   2909 	.area CONST   (CODE)
      0000E6                       2910 ___str_6:
      0000E6 59 6F 75 20 63 61 6E  2911 	.ascii "You can enter storage characters from 'A' to 'Z' to store in"
             20 65 6E 74 65 72 20
             73 74 6F 72 61 67 65
             20 63 68 61 72 61 63
             74 65 72 73 20 66 72
             6F 6D 20 27 41 27 20
             74 6F 20 27 5A 27 20
             74 6F 20 73 74 6F 72
             65 20 69 6E
      000122 20 62 75 66 66 65 72  2912 	.ascii " buffer 0"
             20 30
      00012B 0A                    2913 	.db 0x0a
      00012C 0D                    2914 	.db 0x0d
      00012D 00                    2915 	.db 0x00
                                   2916 	.area CSEG    (CODE)
                                   2917 	.area CONST   (CODE)
      00012E                       2918 ___str_7:
      00012E 50 72 65 73 73 20 2B  2919 	.ascii "Press + to create a new buffer of size between 32 and 4800 b"
             20 74 6F 20 63 72 65
             61 74 65 20 61 20 6E
             65 77 20 62 75 66 66
             65 72 20 6F 66 20 73
             69 7A 65 20 62 65 74
             77 65 65 6E 20 33 32
             20 61 6E 64 20 34 38
             30 30 20 62
      00016A 79 74 65 73           2920 	.ascii "ytes"
      00016E 0A                    2921 	.db 0x0a
      00016F 0D                    2922 	.db 0x0d
      000170 00                    2923 	.db 0x00
                                   2924 	.area CSEG    (CODE)
                                   2925 	.area CONST   (CODE)
      000171                       2926 ___str_8:
      000171 50 72 65 73 73 20 2D  2927 	.ascii "Press - to delete a buffer."
             20 74 6F 20 64 65 6C
             65 74 65 20 61 20 62
             75 66 66 65 72 2E
      00018C 0A                    2928 	.db 0x0a
      00018D 0D                    2929 	.db 0x0d
      00018E 00                    2930 	.db 0x00
                                   2931 	.area CSEG    (CODE)
                                   2932 	.area CONST   (CODE)
      00018F                       2933 ___str_9:
      00018F 50 72 65 73 73 20 3F  2934 	.ascii "Press ? to generate a heap report."
             20 74 6F 20 67 65 6E
             65 72 61 74 65 20 61
             20 68 65 61 70 20 72
             65 70 6F 72 74 2E
      0001B1 0A                    2935 	.db 0x0a
      0001B2 0D                    2936 	.db 0x0d
      0001B3 00                    2937 	.db 0x00
                                   2938 	.area CSEG    (CODE)
                                   2939 	.area CONST   (CODE)
      0001B4                       2940 ___str_10:
      0001B4 50 72 65 73 73 20 3D  2941 	.ascii "Press = to display current contents of buffer 0."
             20 74 6F 20 64 69 73
             70 6C 61 79 20 63 75
             72 72 65 6E 74 20 63
             6F 6E 74 65 6E 74 73
             20 6F 66 20 62 75 66
             66 65 72 20 30 2E
      0001E4 0A                    2942 	.db 0x0a
      0001E5 0D                    2943 	.db 0x0d
      0001E6 00                    2944 	.db 0x00
                                   2945 	.area CSEG    (CODE)
                                   2946 	.area CONST   (CODE)
      0001E7                       2947 ___str_11:
      0001E7 50 72 65 73 73 20 40  2948 	.ascii "Press @ to free all buffers and start program again."
             20 74 6F 20 66 72 65
             65 20 61 6C 6C 20 62
             75 66 66 65 72 73 20
             61 6E 64 20 73 74 61
             72 74 20 70 72 6F 67
             72 61 6D 20 61 67 61
             69 6E 2E
      00021B 0A                    2949 	.db 0x0a
      00021C 0D                    2950 	.db 0x0d
      00021D 00                    2951 	.db 0x00
                                   2952 	.area CSEG    (CODE)
                                   2953 	.area CONST   (CODE)
      00021E                       2954 ___str_12:
      00021E 0A                    2955 	.db 0x0a
      00021F 0D                    2956 	.db 0x0d
      000220 20 65 6E 74 65 72 20  2957 	.ascii " enter the input"
             74 68 65 20 69 6E 70
             75 74
      000230 0A                    2958 	.db 0x0a
      000231 0D                    2959 	.db 0x0d
      000232 00                    2960 	.db 0x00
                                   2961 	.area CSEG    (CODE)
                                   2962 	.area CONST   (CODE)
      000233                       2963 ___str_13:
      000233 0A                    2964 	.db 0x0a
      000234 0D                    2965 	.db 0x0d
      000235 42 75 66 66 65 72 20  2966 	.ascii "Buffer 0 is full."
             30 20 69 73 20 66 75
             6C 6C 2E
      000246 0A                    2967 	.db 0x0a
      000247 0D                    2968 	.db 0x0d
      000248 00                    2969 	.db 0x00
                                   2970 	.area CSEG    (CODE)
                                   2971 	.area CONST   (CODE)
      000249                       2972 ___str_14:
      000249 69 6E 70 75 74 5F 6E  2973 	.ascii "input_num=%d"
             75 6D 3D 25 64
      000255 00                    2974 	.db 0x00
                                   2975 	.area CSEG    (CODE)
                                   2976 	.area CONST   (CODE)
      000256                       2977 ___str_15:
      000256 0A                    2978 	.db 0x0a
      000257 0D                    2979 	.db 0x0d
      000258 20 6D 65 6D 6F 72 79  2980 	.ascii " memory allocation failed for buffer %d"
             20 61 6C 6C 6F 63 61
             74 69 6F 6E 20 66 61
             69 6C 65 64 20 66 6F
             72 20 62 75 66 66 65
             72 20 25 64
      00027F 0A                    2981 	.db 0x0a
      000280 0D                    2982 	.db 0x0d
      000281 00                    2983 	.db 0x00
                                   2984 	.area CSEG    (CODE)
                                   2985 	.area CONST   (CODE)
      000282                       2986 ___str_16:
      000282 0A                    2987 	.db 0x0a
      000283 0D                    2988 	.db 0x0d
      000284 20 6D 65 6D 6F 72 79  2989 	.ascii " memory allocation successful for buffer %d"
             20 61 6C 6C 6F 63 61
             74 69 6F 6E 20 73 75
             63 63 65 73 73 66 75
             6C 20 66 6F 72 20 62
             75 66 66 65 72 20 25
             64
      0002AF 0A                    2990 	.db 0x0a
      0002B0 0D                    2991 	.db 0x0d
      0002B1 00                    2992 	.db 0x00
                                   2993 	.area CSEG    (CODE)
                                   2994 	.area CONST   (CODE)
      0002B2                       2995 ___str_17:
      0002B2 0A                    2996 	.db 0x0a
      0002B3 0D                    2997 	.db 0x0d
      0002B4 20 42 75 66 66 65 72  2998 	.ascii " Buffer 1 is deleted and memory is freed"
             20 31 20 69 73 20 64
             65 6C 65 74 65 64 20
             61 6E 64 20 6D 65 6D
             6F 72 79 20 69 73 20
             66 72 65 65 64
      0002DC 0A                    2999 	.db 0x0a
      0002DD 0D                    3000 	.db 0x0d
      0002DE 00                    3001 	.db 0x00
                                   3002 	.area CSEG    (CODE)
                                   3003 	.area CONST   (CODE)
      0002DF                       3004 ___str_18:
      0002DF 0A                    3005 	.db 0x0a
      0002E0 0D                    3006 	.db 0x0d
      0002E1 20 43 61 6E 6E 6F 74  3007 	.ascii " Cannot delete buffer 0"
             20 64 65 6C 65 74 65
             20 62 75 66 66 65 72
             20 30
      0002F8 0A                    3008 	.db 0x0a
      0002F9 0D                    3009 	.db 0x0d
      0002FA 00                    3010 	.db 0x00
                                   3011 	.area CSEG    (CODE)
                                   3012 	.area CONST   (CODE)
      0002FB                       3013 ___str_19:
      0002FB 0A                    3014 	.db 0x0a
      0002FC 0D                    3015 	.db 0x0d
      0002FD 46 72 65 65 64 20 62  3016 	.ascii "Freed buffer_%d"
             75 66 66 65 72 5F 25
             64
      00030C 0A                    3017 	.db 0x0a
      00030D 0D                    3018 	.db 0x0d
      00030E 00                    3019 	.db 0x00
                                   3020 	.area CSEG    (CODE)
                                   3021 	.area CONST   (CODE)
      00030F                       3022 ___str_20:
      00030F 0A                    3023 	.db 0x0a
      000310 0D                    3024 	.db 0x0d
      000311 20 65 6E 74 65 72 20  3025 	.ascii " enter a valid buffer number"
             61 20 76 61 6C 69 64
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
      00032D 0A                    3026 	.db 0x0a
      00032E 0D                    3027 	.db 0x0d
      00032F 00                    3028 	.db 0x00
                                   3029 	.area CSEG    (CODE)
                                   3030 	.area CONST   (CODE)
      000330                       3031 ___str_21:
      000330 0A                    3032 	.db 0x0a
      000331 0D                    3033 	.db 0x0d
      000332 20 63 6F 6E 74 65 6E  3034 	.ascii " contents of buffer 0 "
             74 73 20 6F 66 20 62
             75 66 66 65 72 20 30
             20
      000348 0A                    3035 	.db 0x0a
      000349 0D                    3036 	.db 0x0d
      00034A 00                    3037 	.db 0x00
                                   3038 	.area CSEG    (CODE)
                                   3039 	.area CONST   (CODE)
      00034B                       3040 ___str_22:
      00034B 0A                    3041 	.db 0x0a
      00034C 0D                    3042 	.db 0x0d
      00034D 20 73 74 6F 72 61 67  3043 	.ascii " storage character -- its hexadecimal representation"
             65 20 63 68 61 72 61
             63 74 65 72 20 2D 2D
             20 69 74 73 20 68 65
             78 61 64 65 63 69 6D
             61 6C 20 72 65 70 72
             65 73 65 6E 74 61 74
             69 6F 6E
      000381 0A                    3044 	.db 0x0a
      000382 0D                    3045 	.db 0x0d
      000383 00                    3046 	.db 0x00
                                   3047 	.area CSEG    (CODE)
                                   3048 	.area CONST   (CODE)
      000384                       3049 ___str_23:
      000384 25 63 2D 2D 25 78     3050 	.ascii "%c--%x"
      00038A 0A                    3051 	.db 0x0a
      00038B 0D                    3052 	.db 0x0d
      00038C 00                    3053 	.db 0x00
                                   3054 	.area CSEG    (CODE)
                                   3055 	.area CONST   (CODE)
      00038D                       3056 ___str_24:
      00038D 0A                    3057 	.db 0x0a
      00038E 0D                    3058 	.db 0x0d
      00038F 20 62 75 66 66 65 72  3059 	.ascii " buffer 0 is freed"
             20 30 20 69 73 20 66
             72 65 65 64
      0003A1 0A                    3060 	.db 0x0a
      0003A2 0D                    3061 	.db 0x0d
      0003A3 00                    3062 	.db 0x00
                                   3063 	.area CSEG    (CODE)
                                   3064 	.area CONST   (CODE)
      0003A4                       3065 ___str_25:
      0003A4 0A                    3066 	.db 0x0a
      0003A5 0D                    3067 	.db 0x0d
      0003A6 20 62 75 66 66 65 72  3068 	.ascii " buffer 1 is freed"
             20 31 20 69 73 20 66
             72 65 65 64
      0003B8 0A                    3069 	.db 0x0a
      0003B9 0D                    3070 	.db 0x0d
      0003BA 00                    3071 	.db 0x00
                                   3072 	.area CSEG    (CODE)
                                   3073 	.area CONST   (CODE)
      0003BB                       3074 ___str_26:
      0003BB 0A                    3075 	.db 0x0a
      0003BC 0D                    3076 	.db 0x0d
      0003BD 20 62 75 66 66 65 72  3077 	.ascii " buffer %d is freed"
             20 25 64 20 69 73 20
             66 72 65 65 64
      0003D0 0A                    3078 	.db 0x0a
      0003D1 0D                    3079 	.db 0x0d
      0003D2 00                    3080 	.db 0x00
                                   3081 	.area CSEG    (CODE)
                                   3082 	.area CONST   (CODE)
      0003D3                       3083 ___str_27:
      0003D3 0A                    3084 	.db 0x0a
      0003D4 0D                    3085 	.db 0x0d
      0003D5 20 61 6C 6C 20 62 75  3086 	.ascii " all buffers are freed. Please start from the beginning"
             66 66 65 72 73 20 61
             72 65 20 66 72 65 65
             64 2E 20 50 6C 65 61
             73 65 20 73 74 61 72
             74 20 66 72 6F 6D 20
             74 68 65 20 62 65 67
             69 6E 6E 69 6E 67
      00040C 0A                    3087 	.db 0x0a
      00040D 0D                    3088 	.db 0x0d
      00040E 00                    3089 	.db 0x00
                                   3090 	.area CSEG    (CODE)
                                   3091 	.area CONST   (CODE)
      00040F                       3092 ___str_28:
      00040F 0A                    3093 	.db 0x0a
      000410 0D                    3094 	.db 0x0d
      000411 20 48 45 41 50 20 52  3095 	.ascii " HEAP REPORT "
             45 50 4F 52 54 20
      00041E 0A                    3096 	.db 0x0a
      00041F 0D                    3097 	.db 0x0d
      000420 00                    3098 	.db 0x00
                                   3099 	.area CSEG    (CODE)
                                   3100 	.area CONST   (CODE)
      000421                       3101 ___str_29:
      000421 0A                    3102 	.db 0x0a
      000422 0D                    3103 	.db 0x0d
      000423 20 42 75 66 66 65 72  3104 	.ascii " Buffer 0 starts at = 0x%x "
             20 30 20 73 74 61 72
             74 73 20 61 74 20 3D
             20 30 78 25 78 20
      00043E 0A                    3105 	.db 0x0a
      00043F 0D                    3106 	.db 0x0d
      000440 00                    3107 	.db 0x00
                                   3108 	.area CSEG    (CODE)
                                   3109 	.area CONST   (CODE)
      000441                       3110 ___str_30:
      000441 0A                    3111 	.db 0x0a
      000442 0D                    3112 	.db 0x0d
      000443 20 42 75 66 66 65 72  3113 	.ascii " Buffer 0 ends at =x%x"
             20 30 20 65 6E 64 73
             20 61 74 20 3D 78 25
             78
      000459 0A                    3114 	.db 0x0a
      00045A 0D                    3115 	.db 0x0d
      00045B 00                    3116 	.db 0x00
                                   3117 	.area CSEG    (CODE)
                                   3118 	.area CONST   (CODE)
      00045C                       3119 ___str_31:
      00045C 0A                    3120 	.db 0x0a
      00045D 0D                    3121 	.db 0x0d
      00045E 20 42 75 66 66 65 72  3122 	.ascii " Buffer 0 size =%d"
             20 30 20 73 69 7A 65
             20 3D 25 64
      000470 0A                    3123 	.db 0x0a
      000471 0D                    3124 	.db 0x0d
      000472 00                    3125 	.db 0x00
                                   3126 	.area CSEG    (CODE)
                                   3127 	.area CONST   (CODE)
      000473                       3128 ___str_32:
      000473 0A                    3129 	.db 0x0a
      000474 0D                    3130 	.db 0x0d
      000475 20 6E 75 6D 62 65 72  3131 	.ascii " number of storage characters in buffer 0=%d"
             20 6F 66 20 73 74 6F
             72 61 67 65 20 63 68
             61 72 61 63 74 65 72
             73 20 69 6E 20 62 75
             66 66 65 72 20 30 3D
             25 64
      0004A1 0A                    3132 	.db 0x0a
      0004A2 0D                    3133 	.db 0x0d
      0004A3 00                    3134 	.db 0x00
                                   3135 	.area CSEG    (CODE)
                                   3136 	.area CONST   (CODE)
      0004A4                       3137 ___str_33:
      0004A4 0A                    3138 	.db 0x0a
      0004A5 0D                    3139 	.db 0x0d
      0004A6 20 6E 75 6D 62 65 72  3140 	.ascii " number of free spaces in buffer 0=%d"
             20 6F 66 20 66 72 65
             65 20 73 70 61 63 65
             73 20 69 6E 20 62 75
             66 66 65 72 20 30 3D
             25 64
      0004CB 0A                    3141 	.db 0x0a
      0004CC 0D                    3142 	.db 0x0d
      0004CD 00                    3143 	.db 0x00
                                   3144 	.area CSEG    (CODE)
                                   3145 	.area CONST   (CODE)
      0004CE                       3146 ___str_34:
      0004CE 0A                    3147 	.db 0x0a
      0004CF 0D                    3148 	.db 0x0d
      0004D0 20                    3149 	.ascii " "
      0004D1 0A                    3150 	.db 0x0a
      0004D2 0D                    3151 	.db 0x0d
      0004D3 00                    3152 	.db 0x00
                                   3153 	.area CSEG    (CODE)
                                   3154 	.area CONST   (CODE)
      0004D4                       3155 ___str_35:
      0004D4 0A                    3156 	.db 0x0a
      0004D5 0D                    3157 	.db 0x0d
      0004D6 20 42 75 66 66 65 72  3158 	.ascii " Buffer 1 starts at = 0x%x "
             20 31 20 73 74 61 72
             74 73 20 61 74 20 3D
             20 30 78 25 78 20
      0004F1 0A                    3159 	.db 0x0a
      0004F2 0D                    3160 	.db 0x0d
      0004F3 00                    3161 	.db 0x00
                                   3162 	.area CSEG    (CODE)
                                   3163 	.area CONST   (CODE)
      0004F4                       3164 ___str_36:
      0004F4 0A                    3165 	.db 0x0a
      0004F5 0D                    3166 	.db 0x0d
      0004F6 20 42 75 66 66 65 72  3167 	.ascii " Buffer 1 ends at =x%x"
             20 31 20 65 6E 64 73
             20 61 74 20 3D 78 25
             78
      00050C 0A                    3168 	.db 0x0a
      00050D 0D                    3169 	.db 0x0d
      00050E 00                    3170 	.db 0x00
                                   3171 	.area CSEG    (CODE)
                                   3172 	.area CONST   (CODE)
      00050F                       3173 ___str_37:
      00050F 0A                    3174 	.db 0x0a
      000510 0D                    3175 	.db 0x0d
      000511 20 42 75 66 66 65 72  3176 	.ascii " Buffer 1 size =%d"
             20 31 20 73 69 7A 65
             20 3D 25 64
      000523 0A                    3177 	.db 0x0a
      000524 0D                    3178 	.db 0x0d
      000525 00                    3179 	.db 0x00
                                   3180 	.area CSEG    (CODE)
                                   3181 	.area CONST   (CODE)
      000526                       3182 ___str_38:
      000526 0A                    3183 	.db 0x0a
      000527 0D                    3184 	.db 0x0d
      000528 20 6E 75 6D 62 65 72  3185 	.ascii " number of storage characters in buffer 1=0"
             20 6F 66 20 73 74 6F
             72 61 67 65 20 63 68
             61 72 61 63 74 65 72
             73 20 69 6E 20 62 75
             66 66 65 72 20 31 3D
             30
      000553 0A                    3186 	.db 0x0a
      000554 0D                    3187 	.db 0x0d
      000555 00                    3188 	.db 0x00
                                   3189 	.area CSEG    (CODE)
                                   3190 	.area CONST   (CODE)
      000556                       3191 ___str_39:
      000556 0A                    3192 	.db 0x0a
      000557 0D                    3193 	.db 0x0d
      000558 20 6E 75 6D 62 65 72  3194 	.ascii " number of free spaces in buffer 1=%d"
             20 6F 66 20 66 72 65
             65 20 73 70 61 63 65
             73 20 69 6E 20 62 75
             66 66 65 72 20 31 3D
             25 64
      00057D 0A                    3195 	.db 0x0a
      00057E 0D                    3196 	.db 0x0d
      00057F 00                    3197 	.db 0x00
                                   3198 	.area CSEG    (CODE)
                                   3199 	.area CONST   (CODE)
      000580                       3200 ___str_40:
      000580 0A                    3201 	.db 0x0a
      000581 0D                    3202 	.db 0x0d
      000582 20 42 75 66 66 65 72  3203 	.ascii " Buffer %d starts at = 0x%x "
             20 25 64 20 73 74 61
             72 74 73 20 61 74 20
             3D 20 30 78 25 78 20
      00059E 0A                    3204 	.db 0x0a
      00059F 0D                    3205 	.db 0x0d
      0005A0 00                    3206 	.db 0x00
                                   3207 	.area CSEG    (CODE)
                                   3208 	.area CONST   (CODE)
      0005A1                       3209 ___str_41:
      0005A1 0A                    3210 	.db 0x0a
      0005A2 0D                    3211 	.db 0x0d
      0005A3 20 42 75 66 66 65 72  3212 	.ascii " Buffer %d ends at =x%x"
             20 25 64 20 65 6E 64
             73 20 61 74 20 3D 78
             25 78
      0005BA 0A                    3213 	.db 0x0a
      0005BB 0D                    3214 	.db 0x0d
      0005BC 00                    3215 	.db 0x00
                                   3216 	.area CSEG    (CODE)
                                   3217 	.area CONST   (CODE)
      0005BD                       3218 ___str_42:
      0005BD 0A                    3219 	.db 0x0a
      0005BE 0D                    3220 	.db 0x0d
      0005BF 20 42 75 66 66 65 72  3221 	.ascii " Buffer %d size =%d"
             20 25 64 20 73 69 7A
             65 20 3D 25 64
      0005D2 0A                    3222 	.db 0x0a
      0005D3 0D                    3223 	.db 0x0d
      0005D4 00                    3224 	.db 0x00
                                   3225 	.area CSEG    (CODE)
                                   3226 	.area CONST   (CODE)
      0005D5                       3227 ___str_43:
      0005D5 0A                    3228 	.db 0x0a
      0005D6 0D                    3229 	.db 0x0d
      0005D7 20 6E 75 6D 62 65 72  3230 	.ascii " number of storage characters in buffer %d=0"
             20 6F 66 20 73 74 6F
             72 61 67 65 20 63 68
             61 72 61 63 74 65 72
             73 20 69 6E 20 62 75
             66 66 65 72 20 25 64
             3D 30
      000603 0A                    3231 	.db 0x0a
      000604 0D                    3232 	.db 0x0d
      000605 00                    3233 	.db 0x00
                                   3234 	.area CSEG    (CODE)
                                   3235 	.area CONST   (CODE)
      000606                       3236 ___str_44:
      000606 0A                    3237 	.db 0x0a
      000607 0D                    3238 	.db 0x0d
      000608 20 6E 75 6D 62 65 72  3239 	.ascii " number of free spaces in buffer %d=%d"
             20 6F 66 20 66 72 65
             65 20 73 70 61 63 65
             73 20 69 6E 20 62 75
             66 66 65 72 20 25 64
             3D 25 64
      00062E 0A                    3240 	.db 0x0a
      00062F 0D                    3241 	.db 0x0d
      000630 00                    3242 	.db 0x00
                                   3243 	.area CSEG    (CODE)
                                   3244 	.area CONST   (CODE)
      000631                       3245 ___str_45:
      000631 0A                    3246 	.db 0x0a
      000632 0D                    3247 	.db 0x0d
      000633 20 63 68 61 72 61 63  3248 	.ascii " characters in buffer 0"
             74 65 72 73 20 69 6E
             20 62 75 66 66 65 72
             20 30
      00064A 0A                    3249 	.db 0x0a
      00064B 0D                    3250 	.db 0x0d
      00064C 00                    3251 	.db 0x00
                                   3252 	.area CSEG    (CODE)
                                   3253 	.area CONST   (CODE)
      00064D                       3254 ___str_46:
      00064D 0A                    3255 	.db 0x0a
      00064E 0D                    3256 	.db 0x0d
      00064F 20 73 74 6F 72 65 64  3257 	.ascii " stored chars=%d"
             20 63 68 61 72 73 3D
             25 64
      00065F 0A                    3258 	.db 0x0a
      000660 0D                    3259 	.db 0x0d
      000661 00                    3260 	.db 0x00
                                   3261 	.area CSEG    (CODE)
                                   3262 	.area CONST   (CODE)
      000662                       3263 ___str_47:
      000662 0A                    3264 	.db 0x0a
      000663 0D                    3265 	.db 0x0d
      000664 20 74 6F 74 61 6C 20  3266 	.ascii " total characters entered=%d"
             63 68 61 72 61 63 74
             65 72 73 20 65 6E 74
             65 72 65 64 3D 25 64
      000680 0A                    3267 	.db 0x0a
      000681 0D                    3268 	.db 0x0d
      000682 00                    3269 	.db 0x00
                                   3270 	.area CSEG    (CODE)
                                   3271 	.area CONST   (CODE)
      000683                       3272 ___str_48:
      000683 25 63                 3273 	.ascii "%c"
      000685 00                    3274 	.db 0x00
                                   3275 	.area CSEG    (CODE)
                                   3276 	.area CONST   (CODE)
      000686                       3277 ___str_49:
      000686 0A                    3278 	.db 0x0a
      000687 0D                    3279 	.db 0x0d
      000688 25 63                 3280 	.ascii "%c"
      00068A 00                    3281 	.db 0x00
                                   3282 	.area CSEG    (CODE)
                                   3283 	.area CONST   (CODE)
      00068B                       3284 ___str_50:
      00068B 0A                    3285 	.db 0x0a
      00068C 0D                    3286 	.db 0x0d
      00068D 20 68 65 61 70 20 72  3287 	.ascii " heap report is done"
             65 70 6F 72 74 20 69
             73 20 64 6F 6E 65
      0006A1 0A                    3288 	.db 0x0a
      0006A2 0D                    3289 	.db 0x0d
      0006A3 00                    3290 	.db 0x00
                                   3291 	.area CSEG    (CODE)
                                   3292 	.area CONST   (CODE)
      0006A4                       3293 ___str_51:
      0006A4 0A                    3294 	.db 0x0a
      0006A5 0D                    3295 	.db 0x0d
      0006A6 20 69 6E 76 61 6C 69  3296 	.ascii " invalid character input.try again"
             64 20 63 68 61 72 61
             63 74 65 72 20 69 6E
             70 75 74 2E 74 72 79
             20 61 67 61 69 6E
      0006C8 0A                    3297 	.db 0x0a
      0006C9 0D                    3298 	.db 0x0d
      0006CA 00                    3299 	.db 0x00
                                   3300 	.area CSEG    (CODE)
                                   3301 	.area CONST   (CODE)
      0006CB                       3302 ___str_52:
      0006CB 0A                    3303 	.db 0x0a
      0006CC 0D                    3304 	.db 0x0d
      0006CD 20 57 45 4C 43 4F 4D  3305 	.ascii " WELCOME "
             45 20
      0006D6 0A                    3306 	.db 0x0a
      0006D7 0D                    3307 	.db 0x0d
      0006D8 00                    3308 	.db 0x00
                                   3309 	.area CSEG    (CODE)
                                   3310 	.area CONST   (CODE)
      0006D9                       3311 ___str_53:
      0006D9 45 6E 74 65 72 20 20  3312 	.ascii "Enter  a number between 32 and 4800 which is divisible by 16"
             61 20 6E 75 6D 62 65
             72 20 62 65 74 77 65
             65 6E 20 33 32 20 61
             6E 64 20 34 38 30 30
             20 77 68 69 63 68 20
             69 73 20 64 69 76 69
             73 69 62 6C 65 20 62
             79 20 31 36
      000715 0A                    3313 	.db 0x0a
      000716 0D                    3314 	.db 0x0d
      000717 00                    3315 	.db 0x00
                                   3316 	.area CSEG    (CODE)
                                   3317 	.area CONST   (CODE)
      000718                       3318 ___str_54:
      000718 20 69 6E 70 75 74 20  3319 	.ascii " input number:%d"
             6E 75 6D 62 65 72 3A
             25 64
      000728 0A                    3320 	.db 0x0a
      000729 0D                    3321 	.db 0x0d
      00072A 00                    3322 	.db 0x00
                                   3323 	.area CSEG    (CODE)
                                   3324 	.area CONST   (CODE)
      00072B                       3325 ___str_55:
      00072B 76 61 6C 69 64 20 69  3326 	.ascii "valid input"
             6E 70 75 74
      000736 0A                    3327 	.db 0x0a
      000737 0D                    3328 	.db 0x0d
      000738 00                    3329 	.db 0x00
                                   3330 	.area CSEG    (CODE)
                                   3331 	.area CONST   (CODE)
      000739                       3332 ___str_56:
      000739 49 6E 56 61 6C 69 64  3333 	.ascii "InValid input. Try again"
             20 69 6E 70 75 74 2E
             20 54 72 79 20 61 67
             61 69 6E
      000751 0A                    3334 	.db 0x0a
      000752 0D                    3335 	.db 0x0d
      000753 00                    3336 	.db 0x00
                                   3337 	.area CSEG    (CODE)
                                   3338 	.area CONST   (CODE)
      000754                       3339 ___str_57:
      000754 0A                    3340 	.db 0x0a
      000755 0D                    3341 	.db 0x0d
      000756 20 65 6E 74 65 72 65  3342 	.ascii " entered input:%d"
             64 20 69 6E 70 75 74
             3A 25 64
      000767 0A                    3343 	.db 0x0a
      000768 0D                    3344 	.db 0x0d
      000769 00                    3345 	.db 0x00
                                   3346 	.area CSEG    (CODE)
                                   3347 	.area XINIT   (CODE)
                                   3348 	.area CABS    (ABS,CODE)
